
import Funciones.Utilities;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.Timer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author josemaria
 */
public class JFGestor extends javax.swing.JFrame {
    public static final char[] caracteres = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','ñ','o','p','q','s','s','t','u','v','w','x','y','z','[',']','?','¿','-','|','/'};
    private File selectedFile;
    private StringBuilder fileText;

    /**
     * Creates new form JIntefaz
     */
    public JFGestor() {
        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTAContenidoFichero = new javax.swing.JTextArea();
        jCBTamañoOfuscador = new javax.swing.JComboBox<>();
        jBDesOfuscar = new javax.swing.JButton();
        jbOfuscar = new javax.swing.JButton();
        jlEstadoFichero = new javax.swing.JLabel();
        jlEstadoGuardado = new javax.swing.JLabel();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAbrir = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTAContenidoFichero.setEditable(false);
        jTAContenidoFichero.setColumns(20);
        jTAContenidoFichero.setRows(5);
        jScrollPane1.setViewportView(jTAContenidoFichero);

        jCBTamañoOfuscador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jBDesOfuscar.setText("Desofuscar");
        jBDesOfuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDesOfuscarActionPerformed(evt);
            }
        });

        jbOfuscar.setText("Ofuscar");
        jbOfuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOfuscarActionPerformed(evt);
            }
        });

        jlEstadoFichero.setText("jLabel1");

        jlEstadoGuardado.setText("jLabel1");

        jMArchivo.setText("Archivo");

        jMIAbrir.setText("Abrir");
        jMIAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAbrirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAbrir);

        jmiGuardar.setText("Guardar");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jMArchivo.add(jmiGuardar);

        jMBMenu.add(jMArchivo);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlEstadoFichero)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jBDesOfuscar)
                            .addGap(18, 18, 18)
                            .addComponent(jbOfuscar))
                        .addComponent(jCBTamañoOfuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlEstadoGuardado))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlEstadoFichero)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlEstadoGuardado)
                .addGap(5, 5, 5)
                .addComponent(jCBTamañoOfuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDesOfuscar)
                    .addComponent(jbOfuscar))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAbrirActionPerformed
        JFileChooser gestorArchivos = new JFileChooser();
        int option = gestorArchivos.showSaveDialog(this);
        jlEstadoFichero.setVisible(true);
        if (option == JFileChooser.APPROVE_OPTION) {
            selectedFile = gestorArchivos.getSelectedFile();
            jlEstadoFichero.setText("El fichero seleccionado es: "+selectedFile.getName());
            cargarFicheroTextField(selectedFile);
        } else {
            jlEstadoFichero.setText("No se ha seleccionado un Fichero.");
        }
        
    }//GEN-LAST:event_jMIAbrirActionPerformed

    private void jbOfuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOfuscarActionPerformed
        if (selectedFile != null && !fileText.isEmpty()) {
            String cadenaOfuscada = ofuscar(fileText.toString(), Integer.parseInt((String) jCBTamañoOfuscador.getSelectedItem()));
            jTAContenidoFichero.setText(cadenaOfuscada);
        }
    }//GEN-LAST:event_jbOfuscarActionPerformed

    private void jBDesOfuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDesOfuscarActionPerformed
        if (selectedFile != null && !fileText.isEmpty()) {
            String cadenaDesOfuscada = desofuscar(jTAContenidoFichero.getText(), Integer.parseInt((String) jCBTamañoOfuscador.getSelectedItem()));
            jTAContenidoFichero.setText(cadenaDesOfuscada);
        }
    }//GEN-LAST:event_jBDesOfuscarActionPerformed

    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        if (selectedFile != null) {
            
            try (PrintWriter pw = new PrintWriter(selectedFile)) {
                pw.print(jTAContenidoFichero.getText());
                jlEstadoGuardado.setText("Se ha guardado correctamente.");
            } catch (FileNotFoundException ex) {
                jlEstadoGuardado.setText("No se ha podido guardar.");
            }
            jlEstadoGuardado.setVisible(true);
            Timer temporizador = new Timer(5000, e -> cambiarVisibilidadEtiqueta(jlEstadoGuardado));
            temporizador.setRepeats(false); // El temporizador se ejecuta una sola vez
            temporizador.start();
        }
    }//GEN-LAST:event_jmiGuardarActionPerformed

    
    
    
    
    
    private void cargarFicheroTextField(File fichero) {
        try(BufferedReader bw = new BufferedReader(new FileReader(fichero))) {
            String cad;
            while ((cad = bw.readLine()) != null) {
                fileText.append(cad+"\n");
            }
            jTAContenidoFichero.setText(fileText.toString());
        } catch (IOException ex) {
            Logger.getLogger(JFGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
              
    }
    
    public static String ofuscar (String mensaje, int n) {
        if (n < 0) { // Validamos que n no sea negativo
            throw new IllegalArgumentException("El valor de n no puede ser negativo");
        }
        StringBuilder cadenaOfuscada = new StringBuilder(); // Inicializamos la CadenaOfuscada
        StringBuilder cadenaAleatoria; // Declaramos la CadenaAleatoria
        for (int i = 0; i < mensaje.length(); i++) {
            cadenaAleatoria = new StringBuilder(); // Inicializamos la Cadena Aleatoria en cada iteración
            for (int j = 0; j < n; j++) { // Creamos la cadena Aleatoria de la longitud pasada por n
                cadenaAleatoria.append(caracteres[Utilities.randomNumber(0, 32)]);
            }
            // Añadimos a la CadenaOfuscada el caracter real y los n caracteres aleatorios
            cadenaOfuscada.append(mensaje.charAt(i)).append(cadenaAleatoria.toString());
        }
        return cadenaOfuscada.toString();
    }

    public static String desofuscar (String mensajeOfuscado, int n) {
        if (n < 0) { // Validamos que n no sea negativo
            throw new IllegalArgumentException("El valor de n no puede ser negativo");
        }
        StringBuilder cadenaDesOfuscada = new StringBuilder(); // Inicializamos la cadenaDesOfuscada
        for (int i = 0; i < mensajeOfuscado.length(); i+=n+1) { // Iteramos cada n+1 para obtener el caracter real
            cadenaDesOfuscada.append(String.valueOf(mensajeOfuscado.charAt(i))); // Añadimos el caracter real a la cadenaDesOfuscada.
        }
        return cadenaDesOfuscada.toString();
    }
    
    private void cambiarVisibilidadEtiqueta(JLabel jl) {
        jl.setVisible(false);
    }
    
    
    
    
    
    
    
    private void inicializar() {
        fileText = new StringBuilder();
        jlEstadoGuardado.setVisible(false);
        jlEstadoFichero.setVisible(false);
        jCBTamañoOfuscador.removeAllItems();
        jCBTamañoOfuscador.addItem("1");
        jCBTamañoOfuscador.addItem("2");
        jCBTamañoOfuscador.addItem("3");
        jCBTamañoOfuscador.addItem("4");
        jCBTamañoOfuscador.addItem("5");
        jCBTamañoOfuscador.addItem("6");
        jCBTamañoOfuscador.addItem("7");
        jCBTamañoOfuscador.addItem("8");
        jCBTamañoOfuscador.addItem("9");
        jCBTamañoOfuscador.addItem("10");
        jCBTamañoOfuscador.addItem("11");
        jCBTamañoOfuscador.addItem("12");
        jCBTamañoOfuscador.addItem("13");
        jCBTamañoOfuscador.addItem("14");
        jCBTamañoOfuscador.addItem("15");
        jCBTamañoOfuscador.addItem("16");
        jCBTamañoOfuscador.addItem("17");
        jCBTamañoOfuscador.addItem("18");
        jCBTamañoOfuscador.addItem("19");
        jCBTamañoOfuscador.addItem("20");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFGestor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBDesOfuscar;
    private javax.swing.JComboBox<String> jCBTamañoOfuscador;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenuItem jMIAbrir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAContenidoFichero;
    private javax.swing.JButton jbOfuscar;
    private javax.swing.JLabel jlEstadoFichero;
    private javax.swing.JLabel jlEstadoGuardado;
    private javax.swing.JMenuItem jmiGuardar;
    // End of variables declaration//GEN-END:variables

    

    
}
