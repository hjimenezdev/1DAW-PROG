/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import Funciones.Utilities;
import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import modelo.Capitulo;
import modelo.Media;
import modelo.ModeloListaCapitulo;
import modelo.ModeloListaMedia;
import modelo.ModeloListaTemporada;
import modelo.Pelicula;
import modelo.Serie;
import modelo.Tematica;
import modelo.Temporada;

/**
 *
 * @author josemaria
 */
public class IntefazJF extends javax.swing.JFrame {

    /**
     * Creates new form IntefazJF
     */
    public IntefazJF() {
        initComponents();
        inicializar();
    }
    
    public void inicializar() {
        this.listaMedia = new ArrayList<>();
        
        // Creamos el Modelos de la Lista
        modeloMedia = new ModeloListaMedia();
        modeloTemporada = new ModeloListaTemporada();
        modeloCapitulo = new ModeloListaCapitulo();
              
        // Actualizamos JTable para que use el Modelo de Canción
        jtListaMedia.setModel(modeloMedia);
        jtListaTemporadas.setModel(modeloTemporada);
        jtListaCapitulos.setModel(modeloCapitulo);
        
        // Ponemos oculto el JPanel Card
        jpInformacionMedia.setVisible(false);
        jpInformacionTemporadas.setVisible(false);
        Pelicula p = new Pelicula("Prueba", 10, LocalDate.of(2022, 10, 1), true, "Paco", "Alvaro", 90, Tematica.CIENCIA_FICCION);
        Serie s = new Serie("Prueba", 10, LocalDate.of(2022, 10, 1), true, LocalDate.of(2022, 10, 1));
        s.añadirTemporada(LocalDate.of(2022, 10, 31));
        s.añadirCapitulo(0, LocalDate.of(2022, 11, 11), "Capitulo 1");
        modeloMedia.añadirMedia(p);
        modeloMedia.añadirMedia(s);
        listaMedia.add(p);
        listaMedia.add(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmEliminarMedia = new javax.swing.JPopupMenu();
        jmiEliminarMedia = new javax.swing.JMenuItem();
        jpmEliminarTemporada = new javax.swing.JPopupMenu();
        jmiEliminarTemporada = new javax.swing.JMenuItem();
        jpmEliminarCapitulo = new javax.swing.JPopupMenu();
        jmiEliminarCapitulo = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaMedia = new javax.swing.JTable();
        jpInformacionMedia = new javax.swing.JPanel();
        jpInformacionSerie = new javax.swing.JPanel();
        jtfSerieFechaIncorporacion = new javax.swing.JTextField();
        jtfSerieFechaEstreno = new javax.swing.JTextField();
        jlSerieTituloNombre = new javax.swing.JLabel();
        jlSerieTituloCalificacionEdad = new javax.swing.JLabel();
        jlSerieTituloFechaIncorporacion = new javax.swing.JLabel();
        jcbSerieDisponibilidad = new javax.swing.JCheckBox();
        jlSerieTituloFechaEstreno = new javax.swing.JLabel();
        jtfSerieNombre = new javax.swing.JTextField();
        jtfSerieCalificacionEdad = new javax.swing.JTextField();
        jlTituloSerie = new javax.swing.JLabel();
        jbCrearTemporada = new javax.swing.JButton();
        jbCrearCapitulo = new javax.swing.JButton();
        jpInformacionPelicula = new javax.swing.JPanel();
        jtfPeliculaDuracion = new javax.swing.JTextField();
        jcbPeliculaDisponibilidad = new javax.swing.JCheckBox();
        jlTituloDuracion = new javax.swing.JLabel();
        jlTituloFechaIncorporación = new javax.swing.JLabel();
        jcbPeliculaTematica = new javax.swing.JComboBox<>();
        jtfPeliculaDirector = new javax.swing.JTextField();
        jlTituloTematica = new javax.swing.JLabel();
        jlTituloDirector = new javax.swing.JLabel();
        jtfPeliculaActorPrincipal = new javax.swing.JTextField();
        jtfPeliculaNombre = new javax.swing.JTextField();
        jtfPeliculaCalificacionDeEdad = new javax.swing.JTextField();
        jlTituloNombre = new javax.swing.JLabel();
        jtfPeliculaFechaIncorporacion = new javax.swing.JTextField();
        jlTituloActorPrincipal = new javax.swing.JLabel();
        jlTituloCalificacionDeEdad = new javax.swing.JLabel();
        jlTituloPelicula = new javax.swing.JLabel();
        jpInformacionTemporadas = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtListaTemporadas = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtListaCapitulos = new javax.swing.JTable();
        jlTemporadaTituloTemporada = new javax.swing.JLabel();
        jlTemporadaTituloFechaEstreno = new javax.swing.JLabel();
        jtfTemporadaFechaEstreno = new javax.swing.JTextField();
        jlCapituloTitulo = new javax.swing.JLabel();
        jlCapituloFechaEmision = new javax.swing.JLabel();
        jtfCapituloTitulo = new javax.swing.JTextField();
        jtfCapituloFechaEmison = new javax.swing.JTextField();
        jbVotarCapitulo = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jmCrear = new javax.swing.JMenu();
        jmiCrearPelicula = new javax.swing.JMenuItem();
        jmiCrearSerie = new javax.swing.JMenuItem();

        jmiEliminarMedia.setText("Eliminar");
        jmiEliminarMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarMediaActionPerformed(evt);
            }
        });
        jpmEliminarMedia.add(jmiEliminarMedia);

        jmiEliminarTemporada.setText("Eliminar");
        jmiEliminarTemporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarTemporadaActionPerformed(evt);
            }
        });
        jpmEliminarTemporada.add(jmiEliminarTemporada);

        jmiEliminarCapitulo.setText("Eliminar");
        jmiEliminarCapitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarCapituloActionPerformed(evt);
            }
        });
        jpmEliminarCapitulo.add(jmiEliminarCapitulo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtListaMedia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaMedia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaMediaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtListaMedia);

        jpInformacionMedia.setLayout(new java.awt.CardLayout());

        jtfSerieFechaIncorporacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSerieFechaIncorporacionFocusLost(evt);
            }
        });

        jtfSerieFechaEstreno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSerieFechaEstrenoFocusLost(evt);
            }
        });

        jlSerieTituloNombre.setText("Nombre:");

        jlSerieTituloCalificacionEdad.setText("Calificación de Edad (0 - 18):");

        jlSerieTituloFechaIncorporacion.setText("Fecha de Incorporación (dd/mm/yyyy):");

        jcbSerieDisponibilidad.setText("Se encuetra Disponibles");
        jcbSerieDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSerieDisponibilidadActionPerformed(evt);
            }
        });

        jlSerieTituloFechaEstreno.setText("Fecha de Estreno (dd/mm/yyyy):");

        jtfSerieNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSerieNombreFocusLost(evt);
            }
        });

        jtfSerieCalificacionEdad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSerieCalificacionEdadFocusLost(evt);
            }
        });

        jlTituloSerie.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jlTituloSerie.setText("Serie: <nombre>");

        jbCrearTemporada.setText("Crear Temporada");
        jbCrearTemporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCrearTemporadaActionPerformed(evt);
            }
        });

        jbCrearCapitulo.setText("Crear Capitulo");
        jbCrearCapitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCrearCapituloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpInformacionSerieLayout = new javax.swing.GroupLayout(jpInformacionSerie);
        jpInformacionSerie.setLayout(jpInformacionSerieLayout);
        jpInformacionSerieLayout.setHorizontalGroup(
            jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jlTituloSerie))
                    .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbCrearTemporada)
                            .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                                    .addGap(55, 55, 55)
                                    .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jlSerieTituloCalificacionEdad)
                                        .addComponent(jlSerieTituloNombre))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jtfSerieNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jtfSerieCalificacionEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                                    .addComponent(jlSerieTituloFechaIncorporacion)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtfSerieFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                                    .addGap(34, 34, 34)
                                    .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jcbSerieDisponibilidad)
                                        .addComponent(jlSerieTituloFechaEstreno))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtfSerieFechaEstreno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                                .addComponent(jbCrearCapitulo)
                                .addGap(8, 8, 8)))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jpInformacionSerieLayout.setVerticalGroup(
            jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTituloSerie)
                .addGap(51, 51, 51)
                .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSerieTituloNombre)
                    .addComponent(jtfSerieNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSerieTituloCalificacionEdad)
                    .addComponent(jtfSerieCalificacionEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSerieTituloFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSerieFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jcbSerieDisponibilidad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSerieTituloFechaEstreno)
                    .addComponent(jtfSerieFechaEstreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(jbCrearTemporada)
                .addGap(18, 18, 18)
                .addComponent(jbCrearCapitulo)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jpInformacionMedia.add(jpInformacionSerie, "informacionSerie");

        jtfPeliculaDuracion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaDuracionFocusLost(evt);
            }
        });

        jcbPeliculaDisponibilidad.setText("Se encuetra Disponible");
        jcbPeliculaDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPeliculaDisponibilidadActionPerformed(evt);
            }
        });

        jlTituloDuracion.setText("Duracion:");

        jlTituloFechaIncorporación.setText("Fecha Incorporación al Catalogo:");

        jcbPeliculaTematica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPeliculaTematica.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbPeliculaTematicaFocusLost(evt);
            }
        });

        jtfPeliculaDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaDirectorFocusLost(evt);
            }
        });

        jlTituloTematica.setText("Tematica");

        jlTituloDirector.setText("Director:");

        jtfPeliculaActorPrincipal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaActorPrincipalFocusLost(evt);
            }
        });

        jtfPeliculaNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaNombreFocusLost(evt);
            }
        });

        jtfPeliculaCalificacionDeEdad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaCalificacionDeEdadFocusLost(evt);
            }
        });

        jlTituloNombre.setText("Nombre:");

        jtfPeliculaFechaIncorporacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaFechaIncorporacionFocusLost(evt);
            }
        });

        jlTituloActorPrincipal.setText("Actor Principal:");

        jlTituloCalificacionDeEdad.setText("Calificación de Edad:");

        jlTituloPelicula.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jlTituloPelicula.setText("Pelicula: <Nombre>");

        javax.swing.GroupLayout jpInformacionPeliculaLayout = new javax.swing.GroupLayout(jpInformacionPelicula);
        jpInformacionPelicula.setLayout(jpInformacionPeliculaLayout);
        jpInformacionPeliculaLayout.setHorizontalGroup(
            jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jcbPeliculaDisponibilidad))
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                    .addGap(65, 65, 65)
                                    .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jlTituloCalificacionDeEdad)
                                        .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                            .addComponent(jlTituloNombre)
                                            .addGap(65, 65, 65))))
                                .addComponent(jlTituloFechaIncorporación))
                            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlTituloTematica)
                                    .addComponent(jlTituloActorPrincipal)
                                    .addComponent(jlTituloDirector)
                                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                        .addComponent(jlTituloDuracion)
                                        .addGap(10, 10, 10)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbPeliculaTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfPeliculaNombre)
                            .addComponent(jtfPeliculaCalificacionDeEdad)
                            .addComponent(jtfPeliculaFechaIncorporacion)
                            .addComponent(jtfPeliculaDirector)
                            .addComponent(jtfPeliculaActorPrincipal)
                            .addComponent(jtfPeliculaDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jlTituloPelicula)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jpInformacionPeliculaLayout.setVerticalGroup(
            jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTituloPelicula)
                .addGap(18, 18, 18)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloNombre)
                    .addComponent(jtfPeliculaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloCalificacionDeEdad)
                    .addComponent(jtfPeliculaCalificacionDeEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaIncorporación)
                    .addComponent(jtfPeliculaFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jcbPeliculaDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloDirector)
                    .addComponent(jtfPeliculaDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloActorPrincipal)
                    .addComponent(jtfPeliculaActorPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addComponent(jlTituloDuracion)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionPeliculaLayout.createSequentialGroup()
                        .addComponent(jtfPeliculaDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTematica)
                    .addComponent(jcbPeliculaTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jpInformacionMedia.add(jpInformacionPelicula, "informacionPelicula");

        jtListaTemporadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaTemporadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaTemporadasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtListaTemporadas);

        jtListaCapitulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaCapitulos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaCapitulosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jtListaCapitulos);

        jlTemporadaTituloTemporada.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jlTemporadaTituloTemporada.setText("Temporada 1");

        jlTemporadaTituloFechaEstreno.setText("Fecha de Estreno: ");

        jtfTemporadaFechaEstreno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfTemporadaFechaEstrenoFocusLost(evt);
            }
        });

        jlCapituloTitulo.setText("Titulo: ");

        jlCapituloFechaEmision.setText("Fecha Emisión:");

        jtfCapituloTitulo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCapituloTituloFocusLost(evt);
            }
        });

        jtfCapituloFechaEmison.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCapituloFechaEmisonFocusLost(evt);
            }
        });

        jbVotarCapitulo.setText("Votar");
        jbVotarCapitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVotarCapituloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpInformacionTemporadasLayout = new javax.swing.GroupLayout(jpInformacionTemporadas);
        jpInformacionTemporadas.setLayout(jpInformacionTemporadasLayout);
        jpInformacionTemporadasLayout.setHorizontalGroup(
            jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlTemporadaTituloTemporada)
                        .addGap(92, 92, 92))
                    .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                                .addComponent(jlCapituloTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfCapituloTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                                .addComponent(jlTemporadaTituloFechaEstreno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfTemporadaFechaEstreno, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                                .addComponent(jlCapituloFechaEmision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfCapituloFechaEmison, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jbVotarCapitulo))
                        .addContainerGap(48, Short.MAX_VALUE))))
        );
        jpInformacionTemporadasLayout.setVerticalGroup(
            jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpInformacionTemporadasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlTemporadaTituloTemporada)
                        .addGap(36, 36, 36)
                        .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlTemporadaTituloFechaEstreno)
                            .addComponent(jtfTemporadaFechaEstreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionTemporadasLayout.createSequentialGroup()
                        .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlCapituloTitulo)
                            .addComponent(jtfCapituloTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jpInformacionTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlCapituloFechaEmision)
                            .addComponent(jtfCapituloFechaEmison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addComponent(jbVotarCapitulo)
                        .addGap(20, 20, 20))))
        );

        jmArchivo.setText("Archivo");

        jmiGuardar.setText("Guardar");
        jmArchivo.add(jmiGuardar);

        jmiCargar.setText("Cargar");
        jmArchivo.add(jmiCargar);

        jMenuBar1.add(jmArchivo);

        jmCrear.setText("Crear");

        jmiCrearPelicula.setText("Crear Pelicula");
        jmiCrearPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearPeliculaActionPerformed(evt);
            }
        });
        jmCrear.add(jmiCrearPelicula);

        jmiCrearSerie.setText("Crear Serie");
        jmiCrearSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearSerieActionPerformed(evt);
            }
        });
        jmCrear.add(jmiCrearSerie);

        jMenuBar1.add(jmCrear);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpInformacionMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpInformacionTemporadas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jpInformacionTemporadas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpInformacionMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiCrearSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearSerieActionPerformed
        // Creamos el JDialog para crear la Serie
        JDCrearSerie jDCrearSerie = new JDCrearSerie(this, rootPaneCheckingEnabled);
        jDCrearSerie.setVisible(true);
        
        // Si la serie se crea correctamente
        if (jDCrearSerie.isCreada()) {
            Serie nuevaSerie = jDCrearSerie.getSerie(); // Obtenemos la Serie Creada
            boolean serieDuplicada = listaMedia.contains(nuevaSerie); // Comprobamos que no exista otra serie igual
            boolean seguirEditando = true; // Booleano para volver a iterar si la serie esta duplicada

            while (serieDuplicada && seguirEditando) { 
                // Mostramos que la serie ya exite
                JOptionPane.showMessageDialog(rootPane, "Ya existe otra Serie con el mismo Título y Calificación de Edad");
                jDCrearSerie.setVisible(true);
                if (jDCrearSerie.isCreada()) { // Si vuelve a crearla
                    nuevaSerie = jDCrearSerie.getSerie(); // Obtenemos la Serie Creada
                    serieDuplicada = listaMedia.contains(nuevaSerie); // Comprobamos si se encuentra en listaMedia
                } else { // Si no lo ha creado (Ha pulsado "Cancelar")
                    seguirEditando = false; // Paramos de Editar el JDialog
                }
            }
            
            if (!serieDuplicada) { // Si la Serie no esta duplicada
                this.listaMedia.add(nuevaSerie); // Añadimos la serie a la lista
                this.modeloMedia.añadirMedia(nuevaSerie); // Añadimos la serie al JTable
            }
        }
    }//GEN-LAST:event_jmiCrearSerieActionPerformed

    private void jmiCrearPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearPeliculaActionPerformed
        // Creamos el JDialog para crear la Pelicula
        JDCrearPelicula jDCrearPelicula = new JDCrearPelicula(this, rootPaneCheckingEnabled);
        jDCrearPelicula.setVisible(true);
        
        // Si la pelicula se crea correctamente
        if (jDCrearPelicula.isCreada()) {
            Pelicula nuevaPelicula = jDCrearPelicula.getPelicula(); // Obtenemos la Pelicula Creada
            boolean peliculaDuplicada = listaMedia.contains(nuevaPelicula); // Comprobamos que no exista otra igual.
            boolean seguirEditando = true; // Booleano para volver a iterar si la pelicula existe

            while (peliculaDuplicada && seguirEditando) {
                // Mostramos el mensaje de que la pelicula ya existe
                JOptionPane.showMessageDialog(rootPane, "Ya existe otra Película con el mismo Título y Calificación de Edad");
                jDCrearPelicula.setVisible(true); // Le volvemos a mostrar el JDialog de Crear Pelicula para que la edite
                if (jDCrearPelicula.isCreada()) { // Si vuelve a crearla
                    nuevaPelicula = jDCrearPelicula.getPelicula(); // Obtenemos la Pelicula Creada
                    peliculaDuplicada = listaMedia.contains(nuevaPelicula); // Comprobamos si existe ya en la lista
                } else { // Si no lo ha creado (Ha pulsado "Cancelar")
                    seguirEditando = false; // Salimos del while
                }
            }
            
            if (!peliculaDuplicada) { // Si la pelicula no esta duplicada
                this.listaMedia.add(nuevaPelicula); // Añadimos la pelicula a la lista
                this.modeloMedia.añadirMedia(nuevaPelicula); // Añaidmos la pelicula al Jtable
            }
        }
    }//GEN-LAST:event_jmiCrearPeliculaActionPerformed

    private void jtListaMediaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaMediaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) { // Si es Click Derecho
            // Mostramos  el Menú
            jpmEliminarMedia.show(jtListaMedia, evt.getX(), evt.getY());
        } else {
            Media mediaSeleccionada = null;
            CardLayout cl = (CardLayout)(jpInformacionMedia.getLayout());
            if (jtListaMedia.getSelectedRow() != -1) {
                mediaSeleccionada = listaMedia.get(jtListaMedia.getSelectedRow());
            }
            
            if (mediaSeleccionada instanceof Pelicula) {
                peliculaSeleccionada = (Pelicula) mediaSeleccionada; // Obtemos la Pelicula Seleccionada
                cargarInfomacioPelicula(); // Cargamos la infomacion en todos los Fields
                // Mostramos la Panle de la Pelicula
                cl.show(jpInformacionMedia, "informacionPelicula");
                // Hacer visible la panel
                jpInformacionMedia.setVisible(true);
                // Hacer invisible el Panel de Temporadas
                jpInformacionTemporadas.setVisible(false);
                temporadaSeleccionada = null;

            } else {
                // Cargamos los datos de la Serie en los campos
                cargarInformacionSerie((Serie) mediaSeleccionada);
                // Deshabilitamos todos los campos de inserción
                deshabilitarTemporada();
                deshabilitarCapitulo();
                // Cargamos las Temporadas
                actualizarListaTempordas();
                jtfTemporadaFechaEstreno.setText("");

                cl.show(jpInformacionMedia, "informacionSerie");
                jpInformacionMedia.setVisible(true);
                jpInformacionTemporadas.setVisible(true);

            }
        }
    }//GEN-LAST:event_jtListaMediaMouseClicked

    private void jmiEliminarMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarMediaActionPerformed
        int index = jtListaMedia.getSelectedRow(); // Obteenos el indice        
        this.listaMedia.remove(index); // Lo eliminamos de la lista
        modeloMedia.eliminarMedia(index); // Lo eliminamos de la Tabla
        jpInformacionMedia.setVisible(false);
        jpInformacionTemporadas.setVisible(false);
    }//GEN-LAST:event_jmiEliminarMediaActionPerformed

    private void jtfPeliculaNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaNombreFocusLost
        String nuevoNombre = jtfPeliculaNombre.getText();
        if (nuevoNombre.equals(peliculaSeleccionada.getNombre())) {
            return;
        }
        boolean validNombre = true;
        String errorMessage = "";
        
        Pelicula nuevaPelicula = new Pelicula(peliculaSeleccionada);
        nuevaPelicula.setNombre(nuevoNombre);
        if (nuevoNombre.isBlank()) {
            errorMessage = "No puedes dejar el nombre vacío";
            validNombre = false;
        } else if (listaMedia.contains(nuevaPelicula)) {
            errorMessage = "No se puede insertar ese nombre ya que exite otra película igual";
            validNombre = false;
        }
        
        if (validNombre) {
            peliculaSeleccionada.setNombre(nuevoNombre);
            actualizarListaMedia();
            jlTituloPelicula.setText("Pelicula: " + nuevoNombre);
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfPeliculaNombre.setText(peliculaSeleccionada.getNombre());
        }
    }//GEN-LAST:event_jtfPeliculaNombreFocusLost

    private void jtfPeliculaCalificacionDeEdadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaCalificacionDeEdadFocusLost
        String nuevaCalificacionEdad = jtfPeliculaCalificacionDeEdad.getText();
        if (nuevaCalificacionEdad.equals(String.valueOf(peliculaSeleccionada.getCalificacionEdad()))) {
            return;
        }
        
        boolean validCalificacionEdad = true;
        String errorMessage = "";
        Pelicula nuevaPelicula = new Pelicula(peliculaSeleccionada);
        
        if (!nuevaCalificacionEdad.matches("\\d+")) {
            errorMessage = "La calificación de Edad debe de contener solo números";
            validCalificacionEdad = false;
        }
        if (validCalificacionEdad && (Integer.valueOf(nuevaCalificacionEdad) < 0 || Integer.valueOf(nuevaCalificacionEdad) > 18)) {
            errorMessage = "Rango inválido debe de ser entre 0 - 18";
            validCalificacionEdad = false;
        }
        
        if (validCalificacionEdad) {
            nuevaPelicula.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            if (listaMedia.contains(nuevaPelicula)) {
                errorMessage = "Ya exite otra película igual.";
                validCalificacionEdad = false;
            }
        }
        
        if (validCalificacionEdad) {
           peliculaSeleccionada.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(this, errorMessage);
            jtfPeliculaCalificacionDeEdad.setText(peliculaSeleccionada.getCalificacionEdad()+"");
        }
    }//GEN-LAST:event_jtfPeliculaCalificacionDeEdadFocusLost

    private void jtfPeliculaFechaIncorporacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaFechaIncorporacionFocusLost
        String nuevaFecha = jtfPeliculaFechaIncorporacion.getText();
        if (nuevaFecha.equals(format.format(peliculaSeleccionada.getFechaIncorporacionAlCatalogo()))) {
            return;
        }
        
        boolean validFecha = true;
        String errorMessage = "";
        
        if (!Utilities.validateLocalDate(nuevaFecha)) {
            errorMessage = "El formato de fecha debe de ser dd/MM/yyyy";
            validFecha = false;
        }
        if (validFecha) {
            peliculaSeleccionada.setFechaIncorporacionAlCatalogo(Utilities.convertToLocalDate(nuevaFecha));
            actualizarListaMedia();
        } else {
           JOptionPane.showMessageDialog(rootPane, errorMessage);
           jtfPeliculaFechaIncorporacion.setText(format.format(peliculaSeleccionada.getFechaIncorporacionAlCatalogo()));
        }
    }//GEN-LAST:event_jtfPeliculaFechaIncorporacionFocusLost

    private void jcbPeliculaDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPeliculaDisponibilidadActionPerformed
       peliculaSeleccionada.setEstaDisponible(jcbPeliculaDisponibilidad.isSelected());
    }//GEN-LAST:event_jcbPeliculaDisponibilidadActionPerformed

    private void jtfPeliculaDirectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaDirectorFocusLost
        String nuevoDirector = jtfPeliculaDirector.getText();
        if (nuevoDirector.isBlank()) {
            JOptionPane.showMessageDialog(this, "No puedes dejar el cambo vacío.");
            jtfPeliculaDirector.setText(peliculaSeleccionada.getDirector());
        } else {
            peliculaSeleccionada.setDirector(nuevoDirector);
            actualizarListaMedia();
        }
    }//GEN-LAST:event_jtfPeliculaDirectorFocusLost

    private void jtfPeliculaActorPrincipalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaActorPrincipalFocusLost
        String nuevoActor = jtfPeliculaActorPrincipal.getText();
        if (nuevoActor.isBlank()) {
            JOptionPane.showMessageDialog(this, "No puedes dejar el cambo vacío.");
            jtfPeliculaActorPrincipal.setText(peliculaSeleccionada.getDirector());
        } else {
            peliculaSeleccionada.setActorPrincipal(nuevoActor);
            actualizarListaMedia();
        }
    }//GEN-LAST:event_jtfPeliculaActorPrincipalFocusLost

    private void jtfPeliculaDuracionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaDuracionFocusLost
        String duracion = jtfPeliculaDuracion.getText();
        if (duracion.equals(String.valueOf(peliculaSeleccionada.getDuracion()+""))) {
            return;
        }
        String errorMessage = "";
        boolean validDuracion = true;
        
        if (!duracion.matches("\\d+")) {
            errorMessage = "La duarcion debe de ser numérica";
            validDuracion = false;
        }
        if (validDuracion && !Utilities.validateRange(Integer.valueOf(duracion), 60, 241)) {
            errorMessage = "La duarcion debe de encontrase entre 60 y 240";
            validDuracion = false;
        }
        
        if (validDuracion) {
            peliculaSeleccionada.setDuracion(Integer.valueOf(duracion));
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfPeliculaDuracion.setText(peliculaSeleccionada.getDuracion()+"");
        }
    }//GEN-LAST:event_jtfPeliculaDuracionFocusLost

    private void jcbPeliculaTematicaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbPeliculaTematicaFocusLost
        if (peliculaSeleccionada.getCategoria() == jcbPeliculaTematica.getSelectedItem()) {
            return;
        }
        
        peliculaSeleccionada.setCategoria((Tematica)jcbPeliculaTematica.getSelectedItem());
        actualizarListaMedia();
    }//GEN-LAST:event_jcbPeliculaTematicaFocusLost

    private void jtfSerieNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSerieNombreFocusLost
        String nuevoNombre = jtfSerieNombre.getText();
        if (nuevoNombre.equals(serieSeleccionada.getNombre())) {
            return;
        }
        boolean validNombre = true;
        String errorMessage = "";
        
        Serie nuevaSerie = new Serie(serieSeleccionada);
        nuevaSerie.setNombre(nuevoNombre);
        if (nuevoNombre.isBlank()) {
            errorMessage = "No puedes dejar el nombre vacío";
            validNombre = false;
        } else if (listaMedia.contains(nuevaSerie)) {
            errorMessage = "No se puede insertar ese nombre ya que exite otra serie igual";
            validNombre = false;
        }
        
        if (validNombre) {
            serieSeleccionada.setNombre(nuevoNombre);
            actualizarListaMedia();
            jlTituloSerie.setText("Serie: " + nuevoNombre);
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfSerieNombre.setText(serieSeleccionada.getNombre());
        }
    }//GEN-LAST:event_jtfSerieNombreFocusLost

    private void jtfSerieCalificacionEdadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSerieCalificacionEdadFocusLost
        String nuevaCalificacionEdad = jtfSerieCalificacionEdad.getText();
        if (nuevaCalificacionEdad.equals(String.valueOf(serieSeleccionada.getCalificacionEdad()))) {
            return;
        }
        
        boolean validCalificacionEdad = true;
        String errorMessage = "";
        Serie nuevaSerie = new Serie(serieSeleccionada);
        if (!nuevaCalificacionEdad.matches("\\d+")) {
            errorMessage = "La calificación de Edad debe de contener solo números";
            validCalificacionEdad = false;
        }
        if (validCalificacionEdad && (Integer.valueOf(nuevaCalificacionEdad) < 0 || Integer.valueOf(nuevaCalificacionEdad) > 18)) {
            errorMessage = "Rango inválido debe de ser entre 0 - 18";
            validCalificacionEdad = false;
        }
        
        if (validCalificacionEdad) {
            nuevaSerie.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            if (listaMedia.contains(nuevaSerie)) {
                errorMessage = "Ya exite otra película igual.";
                validCalificacionEdad = false;
            }
        }
        
        if (validCalificacionEdad) {
            serieSeleccionada.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(this, errorMessage);
            jtfSerieCalificacionEdad.setText(serieSeleccionada.getCalificacionEdad()+"");
        }
    }//GEN-LAST:event_jtfSerieCalificacionEdadFocusLost

    private void jtfSerieFechaIncorporacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSerieFechaIncorporacionFocusLost
        String nuevaFecha = jtfSerieFechaIncorporacion.getText();
        if (nuevaFecha.equals(format.format(serieSeleccionada.getFechaIncorporacionAlCatalogo()))) {
            return;
        }
        
        boolean validFecha = true;
        String errorMessage = "";
        
        if (!Utilities.validateLocalDate(nuevaFecha)) {
            errorMessage = "El formato de fecha debe de ser dd/MM/yyyy";
            validFecha = false;
        }
        if (validFecha) {
            serieSeleccionada.setFechaIncorporacionAlCatalogo(Utilities.convertToLocalDate(nuevaFecha));
            actualizarListaMedia();
        } else {
           JOptionPane.showMessageDialog(rootPane, errorMessage);
           jtfSerieFechaIncorporacion.setText(format.format(serieSeleccionada.getFechaIncorporacionAlCatalogo()));
        }
    }//GEN-LAST:event_jtfSerieFechaIncorporacionFocusLost

    private void jcbSerieDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSerieDisponibilidadActionPerformed
        serieSeleccionada.setEstaDisponible(jcbSerieDisponibilidad.isSelected());
    }//GEN-LAST:event_jcbSerieDisponibilidadActionPerformed

    private void jtfSerieFechaEstrenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSerieFechaEstrenoFocusLost
        String nuevaFecha = jtfSerieFechaEstreno.getText();
        if (nuevaFecha.equals(format.format(serieSeleccionada.getFechaEstreno()))) {
            return;
        }
        
        boolean validFecha = true;
        String errorMessage = "";
        
        if (!Utilities.validateLocalDate(nuevaFecha)) {
            errorMessage = "El formato de fecha debe de ser dd/MM/yyyy";
            validFecha = false;
        }
        
        if (validFecha) {
            validFecha = serieSeleccionada.setFechaEstreno(Utilities.convertToLocalDate(nuevaFecha));
            if (validFecha) {
                actualizarListaMedia();
            } else {
                errorMessage = "La fecha inserta es posterior a la Fecha de la Primera Temporada";
            }
        }
        
        if (!validFecha) {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfSerieFechaEstreno.setText(format.format(serieSeleccionada.getFechaEstreno()));
        }        
    }//GEN-LAST:event_jtfSerieFechaEstrenoFocusLost

    private void jbCrearTemporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCrearTemporadaActionPerformed
        boolean validFecha = false;
        boolean exit = false;
        String fecha = "";
        do {
            fecha = JOptionPane.showInputDialog(this,"Ingrese la Fecha de la Nueva Temporada (dd/mm/yyyy):","Nueva Temporada",JOptionPane.INFORMATION_MESSAGE);
            if (fecha != null && Utilities.validateLocalDate(fecha) && Utilities.validateLocaDateIsAfterOrEquals(Utilities.convertToLocalDate(fecha), serieSeleccionada.getFechaEstreno())) {
                validFecha = true;
            } else if (fecha != null) {
                JOptionPane.showMessageDialog(this, "Fecha inválida la fecha debe de ser posterior a la fecha de estreno de la serie");
                validFecha = false;
            } else {
                exit = true;
            }
        } while (!validFecha && !exit);
        
        if (validFecha && serieSeleccionada.añadirTemporada(Utilities.convertToLocalDate(fecha))) {
            actualizarListaTempordas();
            deshabilitarTemporada();
            deshabilitarCapitulo();
            JOptionPane.showMessageDialog(this, "Temporada Creada con exito");
        } else if (!exit) {
            JOptionPane.showMessageDialog(this, "Ya existe una Temporada el mismo mes.");
        }
    }//GEN-LAST:event_jbCrearTemporadaActionPerformed

    private void jmiEliminarTemporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarTemporadaActionPerformed
        if (serieSeleccionada != null) {
            int index = jtListaTemporadas.getSelectedRow();
            String message = "";
            if (serieSeleccionada.eliminarTemporada(index)) {
                temporadaSeleccionada = null;
                message = "Temporada Eliminada con exito";
                modeloTemporada.eliminarTemporada(index);
                jtfTemporadaFechaEstreno.setText("");
                modeloCapitulo.clear();
            } else {
                message = "No se ha podidio eliminar la Temporada";
            }
            JOptionPane.showMessageDialog(this, message);
        }
    }//GEN-LAST:event_jmiEliminarTemporadaActionPerformed

    private void jmiEliminarCapituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarCapituloActionPerformed
        if (serieSeleccionada != null) {
            int indexTemporada = jtListaTemporadas.getSelectedRow();
            int indexCapitulo = jtListaCapitulos.getSelectedRow();
            String tituloCapitulo = serieSeleccionada.getCapitulo(indexTemporada, indexCapitulo).getTitulo();
            String message = "";
            if (serieSeleccionada.eliminarCapitulo(indexTemporada, tituloCapitulo)) {
                message = "Capitulo Eliminado con exito";
                modeloCapitulo.eliminarCapitulo(indexCapitulo);
            } else {
                message = "No se ha podidio eliminar el Capitulo";
            }
            JOptionPane.showMessageDialog(this, message);
        }
    }//GEN-LAST:event_jmiEliminarCapituloActionPerformed

    private void jtListaTemporadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaTemporadasMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            // Mostramos  el Menú
            jpmEliminarTemporada.show(jtListaTemporadas, evt.getX(), evt.getY());
        } else {
            // Habilitar los inputs Fields de Temporada
            habilitarTemporada();
            // Deshabilitar los inputs Fields de Capitulo
            deshabilitarCapitulo();
            
            indiceTemporada = jtListaTemporadas.getSelectedRow();
            temporadaSeleccionada = serieSeleccionada.getCopiaTemporada(indiceTemporada);
            jlTemporadaTituloTemporada.setText("Temporada " + (indiceTemporada+1));
            jtfTemporadaFechaEstreno.setText(format.format(temporadaSeleccionada.getFechaEstreno()));
            resetearCapitulos();
            actualizarListaCapitulos();
        }
    }//GEN-LAST:event_jtListaTemporadasMouseClicked

    private void jtListaCapitulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaCapitulosMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            // Mostramos  el Menú
            jpmEliminarCapitulo.show(jtListaCapitulos, evt.getX(), evt.getY());
        } else {
            indiceCapitulo = jtListaCapitulos.getSelectedRow();
            // Habilitamos los input Fields
            habilitarCapitulo();
            jtfCapituloTitulo.setText(temporadaSeleccionada.getCapitulo(indiceCapitulo).getTitulo());
            jtfCapituloFechaEmison.setText(format.format(temporadaSeleccionada.getCapitulo(indiceCapitulo).getFechaEmision()));
        }
    }//GEN-LAST:event_jtListaCapitulosMouseClicked

    private void jtfTemporadaFechaEstrenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTemporadaFechaEstrenoFocusLost
        if (temporadaSeleccionada == null || jtListaTemporadas.getSelectedRow() == -1) {
            return;
        }
        boolean isValidInput = true;
        String fechaEstrenoString = jtfTemporadaFechaEstreno.getText();
        String errorMesage = "";
        if (!Utilities.validateLocalDate(fechaEstrenoString)) {
            errorMesage = "La fecha de estreno es inválida";
            isValidInput = false;
        }
        if (isValidInput && !Utilities.validateLocaDateIsAfterOrEquals(Utilities.convertToLocalDate(fechaEstrenoString), serieSeleccionada.getFechaEstreno())) {
            errorMesage = "La fecha de estreno es anterior a la Fecha de Estreno de la Serie";
            isValidInput = false;
        }
        
        if (isValidInput) {
            LocalDate fechaEstrenoTemporada = Utilities.convertToLocalDate(fechaEstrenoString);
            if (serieSeleccionada.setFechaEstrenoTemporada(indiceTemporada, fechaEstrenoTemporada)) {
                actualizarListaTempordas();
            } else {
                errorMesage = "La Fecha de Estreno insertada es posterior a la Fecha de Emisión de un Capítulo o ya existe una Temporada en el mismo mes.";
                isValidInput = false;
            }
        }
        
        if (!isValidInput) {
            JOptionPane.showMessageDialog(rootPane, errorMesage);
            jtfTemporadaFechaEstreno.setText(format.format(serieSeleccionada.getCopiaTemporada(indiceTemporada).getFechaEstreno()));
        }
    }//GEN-LAST:event_jtfTemporadaFechaEstrenoFocusLost

    private void jbCrearCapituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCrearCapituloActionPerformed
        if (temporadaSeleccionada == null) {
            JOptionPane.showMessageDialog(rootPane, "No has seleccionado ninguna Temporada");
            return;
        }
        boolean isValido = true; 
        JTextField jtfTitulo = new JTextField();
        JTextField jtfFechaEmision = new JTextField();
        Object[] message = {
            "Titulo: ", jtfTitulo,
            "Fecha Emisión: ", jtfFechaEmision
        };
        
        int option = JOptionPane.showConfirmDialog(this, message, "Crear Capítulo", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String titulo = jtfTitulo.getText();
            String fechaEmisionString= jtfFechaEmision.getText();
            if (titulo.isBlank()) {
                JOptionPane.showMessageDialog(this, "El Título no puede estar vacío");
                isValido = false;
            }
            if (isValido && !Utilities.validateLocalDate(fechaEmisionString)) {
                JOptionPane.showMessageDialog(this, "El formato de la Fecha de Emisión es erroneo debe de ser dd/mm/yyyy");
                isValido = false;
            }
            if (isValido && !Utilities.validateLocaDateIsAfterOrEquals(Utilities.convertToLocalDate(fechaEmisionString), temporadaSeleccionada.getFechaEstreno())) {
                JOptionPane.showMessageDialog(this, "La fecha insertada es anterior a la Fecha de Estreno de la Temporada");
                isValido = false;
            }
            
            if (isValido) {
                LocalDate fechaEmision = Utilities.convertToLocalDate(fechaEmisionString);
                Capitulo nuevoCapitulo = new Capitulo(titulo, fechaEmision);
                if (serieSeleccionada.añadirCapitulo(indiceTemporada, nuevoCapitulo)) {
                    JOptionPane.showMessageDialog(this, "Capítulo creado con exito");
                    temporadaSeleccionada = serieSeleccionada.getCopiaTemporada(indiceTemporada);
                    actualizarListaCapitulos();
                } else {
                    JOptionPane.showMessageDialog(this, "El capítulo ya exite en la Temporada");
                }
            }
        }
    }//GEN-LAST:event_jbCrearCapituloActionPerformed

    private void jtfCapituloTituloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCapituloTituloFocusLost
        String titulo = jtfCapituloTitulo.getText();
        if (serieSeleccionada.setCapitulo(indiceTemporada, indiceCapitulo, titulo)) {
            temporadaSeleccionada = serieSeleccionada.getCopiaTemporada(indiceTemporada);
            actualizarListaCapitulos();
        } else {
            JOptionPane.showMessageDialog(rootPane, "El título no es válido");
            jtfCapituloTitulo.setText(temporadaSeleccionada.getCapitulo(indiceCapitulo).getTitulo());
        }
    }//GEN-LAST:event_jtfCapituloTituloFocusLost

    private void jtfCapituloFechaEmisonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCapituloFechaEmisonFocusLost
        if (indiceCapitulo == -1) {
            return;
        }
        String fechaEmision = jtfCapituloFechaEmison.getText();
        boolean validFecha = true;
        String errorMessage = "";
        
        if (!Utilities.validateLocalDate(fechaEmision)) {
            errorMessage = "Formato inválido debe de ser dd/MM/yyyy";
            validFecha = false;
        }
        
        if (validFecha) {
            if (serieSeleccionada.setCapitulo(indiceTemporada, indiceCapitulo, Utilities.convertToLocalDate(fechaEmision))) {
                temporadaSeleccionada = serieSeleccionada.getCopiaTemporada(indiceTemporada);
                actualizarListaCapitulos();
            } else {
                errorMessage = "La fecha inserta es anterior a la Fecha de Estreno de la Temporada";
                validFecha = false;
            }
        }
        
        if (!validFecha) {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfCapituloFechaEmison.setText(format.format(temporadaSeleccionada.getCapitulo(indiceCapitulo).getFechaEmision()));
        }
    }//GEN-LAST:event_jtfCapituloFechaEmisonFocusLost

    private void jbVotarCapituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVotarCapituloActionPerformed
        if (indiceCapitulo == -1) {
            JOptionPane.showMessageDialog(rootPane, "No has seleccionado ningun Capítulo");
            return;
        }
        
        boolean tipoVoto = false;
        int indexCapitulo = jtListaCapitulos.getSelectedRow();
        int voto = JOptionPane.showConfirmDialog(null, "Realizar voto al Capitulo (Si = Voto Positivo | No = Voto Negativo)", "Guardar archivo", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        String mensaje = null;
        if (indexCapitulo == -1) {
            mensaje = "No has seleccionado ningún Capítulo";
        } else if (voto == JOptionPane.OK_OPTION) {
            tipoVoto = true;
            mensaje = "Se ha realizado el voto positivo";
        } else if (voto == JOptionPane.NO_OPTION) {
            tipoVoto = false;
            mensaje = "Se ha realizado el voto negativo"; 
        }
        
        if (voto == JOptionPane.OK_OPTION || voto == JOptionPane.NO_OPTION) {
            serieSeleccionada.meGusta(indiceTemporada, indexCapitulo, tipoVoto);
            actualizarListaCapitulos();
            actualizarListaTempordas();
        }
        if (mensaje != null) {
            JOptionPane.showMessageDialog(this, mensaje);
        }
    }//GEN-LAST:event_jbVotarCapituloActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntefazJF().setVisible(true);
            }
        });
    }

    
    private void cargarInfomacioPelicula() {
        jcbPeliculaTematica.setModel(new DefaultComboBoxModel(Tematica.values()));
        jlTituloPelicula.setText("Pelicula: " + peliculaSeleccionada.getNombre());
        jtfPeliculaNombre.setText(peliculaSeleccionada.getNombre());
        jtfPeliculaCalificacionDeEdad.setText(peliculaSeleccionada.getCalificacionEdad()+"");
        jtfPeliculaFechaIncorporacion.setText(format.format(peliculaSeleccionada.getFechaIncorporacionAlCatalogo()));
        jcbPeliculaDisponibilidad.setSelected(peliculaSeleccionada.isEstaDisponible());
        jtfPeliculaDirector.setText(peliculaSeleccionada.getDirector());
        jtfPeliculaActorPrincipal.setText(peliculaSeleccionada.getActorPrincipal());
        jtfPeliculaDuracion.setText(peliculaSeleccionada.getDuracion()+"");
        jcbPeliculaTematica.setSelectedItem(peliculaSeleccionada.getCategoria());
   }
    
    private void cargarInformacionSerie (Serie serieSeleccionada) {
       jlTituloSerie.setText("Serie: " + serieSeleccionada.getNombre());
       jtfSerieNombre.setText(serieSeleccionada.getNombre());
       jtfSerieCalificacionEdad.setText(serieSeleccionada.getCalificacionEdad()+"");
       jtfSerieFechaIncorporacion.setText(format.format(serieSeleccionada.getFechaIncorporacionAlCatalogo()));
       jcbSerieDisponibilidad.setSelected(serieSeleccionada.isEstaDisponible());
       jtfSerieFechaEstreno.setText(format.format(serieSeleccionada.getFechaEstreno()));
   }
    
    private void actualizarListaMedia () {
        modeloMedia.clear();
        
        for (Media m : listaMedia) {
            modeloMedia.añadirMedia(m);
        }
    }
    private void actualizarListaTempordas () {
        if (serieSeleccionada != null)  {
            modeloTemporada.clear();
            int index = 0;
            Temporada temporada = serieSeleccionada.getCopiaTemporada(index++);
            while (temporada != null) {
                modeloTemporada.añadirTemporada(temporada);
                temporada = serieSeleccionada.getCopiaTemporada(index++);
            }
        }
    }
    private void actualizarListaCapitulos() {
        if (temporadaSeleccionada != null) {
            modeloCapitulo.clear();
            Temporada temporada = serieSeleccionada.getCopiaTemporada(indiceTemporada);
            int index = 0;
            Capitulo capitulo = temporada.getCapitulo(index++);
            while (capitulo != null) {
                modeloCapitulo.añadirCapitulo(capitulo);
                capitulo = temporada.getCapitulo(index++);
            }
        }
    }
    
    private void resetearCapitulos() {
        indiceCapitulo = -1;
        jtfCapituloTitulo.setText("");
        jtfCapituloFechaEmison.setText("");
    }
    private void deshabilitarTemporada() {
        jtfTemporadaFechaEstreno.setText("");
        jtfTemporadaFechaEstreno.setEnabled(false);
    }
    private void habilitarTemporada() {
        jtfTemporadaFechaEstreno.setEnabled(true);
    }
    
    private void deshabilitarCapitulo () {
        jtfCapituloTitulo.setText("");
        jtfCapituloTitulo.setEnabled(false);
        
        jtfCapituloFechaEmison.setText("");
        jtfCapituloFechaEmison.setEnabled(false);
    }
    private void habilitarCapitulo() {
        jtfCapituloTitulo.setEnabled(true);
        jtfCapituloFechaEmison.setEnabled(true);
    }
        
    
    
    
    
    private DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private ArrayList<Media> listaMedia;
    private Pelicula peliculaSeleccionada;
    private Serie serieSeleccionada;
    private Temporada temporadaSeleccionada;
    private int indiceCapitulo;
    private int indiceTemporada;
    private ModeloListaMedia modeloMedia;
    private ModeloListaTemporada modeloTemporada;
    private ModeloListaCapitulo modeloCapitulo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbCrearCapitulo;
    private javax.swing.JButton jbCrearTemporada;
    private javax.swing.JButton jbVotarCapitulo;
    private javax.swing.JCheckBox jcbPeliculaDisponibilidad;
    private javax.swing.JComboBox<String> jcbPeliculaTematica;
    private javax.swing.JCheckBox jcbSerieDisponibilidad;
    private javax.swing.JLabel jlCapituloFechaEmision;
    private javax.swing.JLabel jlCapituloTitulo;
    private javax.swing.JLabel jlSerieTituloCalificacionEdad;
    private javax.swing.JLabel jlSerieTituloFechaEstreno;
    private javax.swing.JLabel jlSerieTituloFechaIncorporacion;
    private javax.swing.JLabel jlSerieTituloNombre;
    private javax.swing.JLabel jlTemporadaTituloFechaEstreno;
    private javax.swing.JLabel jlTemporadaTituloTemporada;
    private javax.swing.JLabel jlTituloActorPrincipal;
    private javax.swing.JLabel jlTituloCalificacionDeEdad;
    private javax.swing.JLabel jlTituloDirector;
    private javax.swing.JLabel jlTituloDuracion;
    private javax.swing.JLabel jlTituloFechaIncorporación;
    private javax.swing.JLabel jlTituloNombre;
    private javax.swing.JLabel jlTituloPelicula;
    private javax.swing.JLabel jlTituloSerie;
    private javax.swing.JLabel jlTituloTematica;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenu jmCrear;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiCrearPelicula;
    private javax.swing.JMenuItem jmiCrearSerie;
    private javax.swing.JMenuItem jmiEliminarCapitulo;
    private javax.swing.JMenuItem jmiEliminarMedia;
    private javax.swing.JMenuItem jmiEliminarTemporada;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JPanel jpInformacionMedia;
    private javax.swing.JPanel jpInformacionPelicula;
    private javax.swing.JPanel jpInformacionSerie;
    private javax.swing.JPanel jpInformacionTemporadas;
    private javax.swing.JPopupMenu jpmEliminarCapitulo;
    private javax.swing.JPopupMenu jpmEliminarMedia;
    private javax.swing.JPopupMenu jpmEliminarTemporada;
    private javax.swing.JTable jtListaCapitulos;
    private javax.swing.JTable jtListaMedia;
    private javax.swing.JTable jtListaTemporadas;
    private javax.swing.JTextField jtfCapituloFechaEmison;
    private javax.swing.JTextField jtfCapituloTitulo;
    private javax.swing.JTextField jtfPeliculaActorPrincipal;
    private javax.swing.JTextField jtfPeliculaCalificacionDeEdad;
    private javax.swing.JTextField jtfPeliculaDirector;
    private javax.swing.JTextField jtfPeliculaDuracion;
    private javax.swing.JTextField jtfPeliculaFechaIncorporacion;
    private javax.swing.JTextField jtfPeliculaNombre;
    private javax.swing.JTextField jtfSerieCalificacionEdad;
    private javax.swing.JTextField jtfSerieFechaEstreno;
    private javax.swing.JTextField jtfSerieFechaIncorporacion;
    private javax.swing.JTextField jtfSerieNombre;
    private javax.swing.JTextField jtfTemporadaFechaEstreno;
    // End of variables declaration//GEN-END:variables
}
