/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import Funciones.Utilities;
import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Media;
import modelo.ModeloListaMedia;
import modelo.Pelicula;
import modelo.Serie;
import modelo.Tematica;

/**
 *
 * @author josemaria
 */
public class IntefazJF extends javax.swing.JFrame {

    /**
     * Creates new form IntefazJF
     */
    public IntefazJF() {
        initComponents();
        inicializar();
    }
    
    public void inicializar() {
        this.listaMedia = new ArrayList<>();
        
        // Creamos el Modelos de la Lista
        modelo = new ModeloListaMedia();
              
        // Actualizamos JTable para que use el Modelo de Canción
        jtListaMedia.setModel(modelo);
        // Ponemos oculto el JPanel Card
        
        Pelicula p = new Pelicula("Prueba", 10, LocalDate.of(2022, 10, 1), true, "Paco", "Alvaro", 90, Tematica.CIENCIA_FICCION);
        Serie s = new Serie("Prueba", 10, LocalDate.of(2022, 10, 1), true, LocalDate.of(2022, 10, 1));
        s.añadirTemporada(LocalDate.of(2022, 10, 31));
        s.añadirCapitulo(0, LocalDate.of(2022, 11, 11), "Capitulo 1");
        modelo.añadirMedia(p);
        modelo.añadirMedia(s);
        listaMedia.add(p);
        listaMedia.add(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmEliminar = new javax.swing.JPopupMenu();
        jmiEliminar = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaMedia = new javax.swing.JTable();
        jpInformacionMedia = new javax.swing.JPanel();
        jpInformacionSerie = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jpInformacionPelicula = new javax.swing.JPanel();
        jtfPeliculaDuracion = new javax.swing.JTextField();
        jcbPeliculaDisponibilidad = new javax.swing.JCheckBox();
        jlTituloDuracion = new javax.swing.JLabel();
        jlTituloFechaIncorporación = new javax.swing.JLabel();
        jcbPeliculaTematica = new javax.swing.JComboBox<>();
        jtfPeliculaDirector = new javax.swing.JTextField();
        jlTituloTematica = new javax.swing.JLabel();
        jlTituloDirector = new javax.swing.JLabel();
        jtfPeliculaActorPrincipal = new javax.swing.JTextField();
        jtfPeliculaNombre = new javax.swing.JTextField();
        jtfPeliculaCalificacionDeEdad = new javax.swing.JTextField();
        jlTituloNombre = new javax.swing.JLabel();
        jtfPeliculaFechaIncorporacion = new javax.swing.JTextField();
        jlTituloActorPrincipal = new javax.swing.JLabel();
        jlTituloCalificacionDeEdad = new javax.swing.JLabel();
        jlTituloPelicula = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jmCrear = new javax.swing.JMenu();
        jmiCrearPelicula = new javax.swing.JMenuItem();
        jmiCrearSerie = new javax.swing.JMenuItem();

        jmiEliminar.setText("Eliminar");
        jmiEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarActionPerformed(evt);
            }
        });
        jpmEliminar.add(jmiEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtListaMedia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaMedia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaMediaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtListaMedia);

        jpInformacionMedia.setLayout(new java.awt.CardLayout());

        jLabel2.setText("Serie");

        javax.swing.GroupLayout jpInformacionSerieLayout = new javax.swing.GroupLayout(jpInformacionSerie);
        jpInformacionSerie.setLayout(jpInformacionSerieLayout);
        jpInformacionSerieLayout.setHorizontalGroup(
            jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionSerieLayout.createSequentialGroup()
                .addContainerGap(213, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(136, 136, 136))
        );
        jpInformacionSerieLayout.setVerticalGroup(
            jpInformacionSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionSerieLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jLabel2)
                .addContainerGap(294, Short.MAX_VALUE))
        );

        jpInformacionMedia.add(jpInformacionSerie, "informacionSerie");

        jtfPeliculaDuracion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaDuracionFocusLost(evt);
            }
        });

        jcbPeliculaDisponibilidad.setText("Se encuetra Disponible");
        jcbPeliculaDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPeliculaDisponibilidadActionPerformed(evt);
            }
        });

        jlTituloDuracion.setText("Duracion:");

        jlTituloFechaIncorporación.setText("Fecha Incorporación al Catalogo:");

        jcbPeliculaTematica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPeliculaTematica.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbPeliculaTematicaFocusLost(evt);
            }
        });

        jtfPeliculaDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaDirectorFocusLost(evt);
            }
        });

        jlTituloTematica.setText("Tematica");

        jlTituloDirector.setText("Director:");

        jtfPeliculaActorPrincipal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaActorPrincipalFocusLost(evt);
            }
        });

        jtfPeliculaNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaNombreFocusLost(evt);
            }
        });

        jtfPeliculaCalificacionDeEdad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaCalificacionDeEdadFocusLost(evt);
            }
        });

        jlTituloNombre.setText("Nombre:");

        jtfPeliculaFechaIncorporacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPeliculaFechaIncorporacionFocusLost(evt);
            }
        });

        jlTituloActorPrincipal.setText("Actor Principal:");

        jlTituloCalificacionDeEdad.setText("Calificación de Edad:");

        jlTituloPelicula.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jlTituloPelicula.setText("Pelicula: <Nombre>");

        javax.swing.GroupLayout jpInformacionPeliculaLayout = new javax.swing.GroupLayout(jpInformacionPelicula);
        jpInformacionPelicula.setLayout(jpInformacionPeliculaLayout);
        jpInformacionPeliculaLayout.setHorizontalGroup(
            jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jcbPeliculaDisponibilidad))
                            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jlTituloCalificacionDeEdad)
                                                .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                                    .addComponent(jlTituloNombre)
                                                    .addGap(65, 65, 65))))
                                        .addComponent(jlTituloFechaIncorporación))
                                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jlTituloTematica)
                                            .addComponent(jlTituloActorPrincipal)
                                            .addComponent(jlTituloDirector)
                                            .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                                                .addComponent(jlTituloDuracion)
                                                .addGap(10, 10, 10)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcbPeliculaTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfPeliculaNombre)
                                    .addComponent(jtfPeliculaCalificacionDeEdad)
                                    .addComponent(jtfPeliculaFechaIncorporacion)
                                    .addComponent(jtfPeliculaDirector)
                                    .addComponent(jtfPeliculaActorPrincipal)
                                    .addComponent(jtfPeliculaDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jlTituloPelicula)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jpInformacionPeliculaLayout.setVerticalGroup(
            jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionPeliculaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jlTituloPelicula)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloNombre)
                    .addComponent(jtfPeliculaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloCalificacionDeEdad)
                    .addComponent(jtfPeliculaCalificacionDeEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaIncorporación)
                    .addComponent(jtfPeliculaFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jcbPeliculaDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloDirector)
                    .addComponent(jtfPeliculaDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloActorPrincipal)
                    .addComponent(jtfPeliculaActorPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionPeliculaLayout.createSequentialGroup()
                        .addComponent(jlTituloDuracion)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionPeliculaLayout.createSequentialGroup()
                        .addComponent(jtfPeliculaDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jpInformacionPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTematica)
                    .addComponent(jcbPeliculaTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        jpInformacionMedia.add(jpInformacionPelicula, "informacionPelicula");

        jmArchivo.setText("Archivo");

        jmiGuardar.setText("Guardar");
        jmArchivo.add(jmiGuardar);

        jmiCargar.setText("Cargar");
        jmArchivo.add(jmiCargar);

        jMenuBar1.add(jmArchivo);

        jmCrear.setText("Crear");

        jmiCrearPelicula.setText("Crear Pelicula");
        jmiCrearPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearPeliculaActionPerformed(evt);
            }
        });
        jmCrear.add(jmiCrearPelicula);

        jmiCrearSerie.setText("Crear Serie");
        jmiCrearSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearSerieActionPerformed(evt);
            }
        });
        jmCrear.add(jmiCrearSerie);

        jMenuBar1.add(jmCrear);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpInformacionMedia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpInformacionMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiCrearSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearSerieActionPerformed
        // Creamos el JDialog para crear la Serie
        JDCrearSerie jDCrearSerie = new JDCrearSerie(this, rootPaneCheckingEnabled);
        jDCrearSerie.setVisible(true);
        
        // Si la serie se crea correctamente
        if (jDCrearSerie.isCreada()) {
            Serie nuevaSerie = jDCrearSerie.getSerie(); // Obtenemos la Serie Creada
            boolean serieDuplicada = listaMedia.contains(nuevaSerie); // Comprobamos que no exista otra serie igual
            boolean seguirEditando = true; // Booleano para volver a iterar si la serie esta duplicada

            while (serieDuplicada && seguirEditando) { 
                // Mostramos que la serie ya exite
                JOptionPane.showMessageDialog(rootPane, "Ya existe otra Serie con el mismo Título y Calificación de Edad");
                jDCrearSerie.setVisible(true);
                if (jDCrearSerie.isCreada()) { // Si vuelve a crearla
                    nuevaSerie = jDCrearSerie.getSerie(); // Obtenemos la Serie Creada
                    serieDuplicada = listaMedia.contains(nuevaSerie); // Comprobamos si se encuentra en listaMedia
                } else { // Si no lo ha creado (Ha pulsado "Cancelar")
                    seguirEditando = false; // Paramos de Editar el JDialog
                }
            }
            
            if (!serieDuplicada) { // Si la Serie no esta duplicada
                this.listaMedia.add(nuevaSerie); // Añadimos la serie a la lista
                this.modelo.añadirMedia(nuevaSerie); // Añadimos la serie al JTable
            }
        }
    }//GEN-LAST:event_jmiCrearSerieActionPerformed

    private void jmiCrearPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearPeliculaActionPerformed
        // Creamos el JDialog para crear la Pelicula
        JDCrearPelicula jDCrearPelicula = new JDCrearPelicula(this, rootPaneCheckingEnabled);
        jDCrearPelicula.setVisible(true);
        
        // Si la pelicula se crea correctamente
        if (jDCrearPelicula.isCreada()) {
            Pelicula nuevaPelicula = jDCrearPelicula.getPelicula(); // Obtenemos la Pelicula Creada
            boolean peliculaDuplicada = listaMedia.contains(nuevaPelicula); // Comprobamos que no exista otra igual.
            boolean seguirEditando = true; // Booleano para volver a iterar si la pelicula existe

            while (peliculaDuplicada && seguirEditando) {
                // Mostramos el mensaje de que la pelicula ya existe
                JOptionPane.showMessageDialog(rootPane, "Ya existe otra Película con el mismo Título y Calificación de Edad");
                jDCrearPelicula.setVisible(true); // Le volvemos a mostrar el JDialog de Crear Pelicula para que la edite
                if (jDCrearPelicula.isCreada()) { // Si vuelve a crearla
                    nuevaPelicula = jDCrearPelicula.getPelicula(); // Obtenemos la Pelicula Creada
                    peliculaDuplicada = listaMedia.contains(nuevaPelicula); // Comprobamos si existe ya en la lista
                } else { // Si no lo ha creado (Ha pulsado "Cancelar")
                    seguirEditando = false; // Salimos del while
                }
            }
            
            if (!peliculaDuplicada) { // Si la pelicula no esta duplicada
                this.listaMedia.add(nuevaPelicula); // Añadimos la pelicula a la lista
                this.modelo.añadirMedia(nuevaPelicula); // Añaidmos la pelicula al Jtable
            }
        }
    }//GEN-LAST:event_jmiCrearPeliculaActionPerformed

    private void jtListaMediaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaMediaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) { // Si es Click Derecho
            // Mostramos  el Menú
            jpmEliminar.show(jtListaMedia, evt.getX(), evt.getY());
        } else if(evt.getClickCount() == 1)  {
            CardLayout cl = (CardLayout)(jpInformacionMedia.getLayout());
            if (jtListaMedia.getSelectedRow() != -1) {
                mediaSeleccionada = listaMedia.get(jtListaMedia.getSelectedRow());

            }
            if (mediaSeleccionada instanceof Pelicula) {
                cargarInfomacioPelicula((Pelicula) mediaSeleccionada);
                cl.show(jpInformacionMedia, "informacionPelicula");
            } else {
                cl.show(jpInformacionMedia, "informacionSerie");
            }
        }
    }//GEN-LAST:event_jtListaMediaMouseClicked

    private void jmiEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarActionPerformed
        int index = jtListaMedia.getSelectedRow(); // Obteenos el indice        
        this.listaMedia.remove(index); // Lo eliminamos de la lista
        modelo.eliminarMedia(index); // Lo eliminamos de la Tabla
    }//GEN-LAST:event_jmiEliminarActionPerformed

    private void jtfPeliculaNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaNombreFocusLost
        String nuevoNombre = jtfPeliculaNombre.getText();
        if (nuevoNombre.equals(mediaSeleccionada.getNombre())) {
            return;
        }
        boolean validNombre = true;
        String errorMessage = "";
        
        Pelicula nuevaPelicula = new Pelicula((Pelicula) mediaSeleccionada);
        nuevaPelicula.setNombre(nuevoNombre);
        if (nuevoNombre.isBlank()) {
            errorMessage = "No puedes dejar el nombre vacío";
            validNombre = false;
        } else if (listaMedia.contains(nuevaPelicula)) {
            errorMessage = "No se puede insertar ese nombre ya que exite otra película igual";
            validNombre = false;
        }
        
        if (validNombre) {
            mediaSeleccionada.setNombre(nuevoNombre);
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfPeliculaNombre.setText(mediaSeleccionada.getNombre());
        }
    }//GEN-LAST:event_jtfPeliculaNombreFocusLost

    private void jtfPeliculaCalificacionDeEdadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaCalificacionDeEdadFocusLost
        String nuevaCalificacionEdad = jtfPeliculaCalificacionDeEdad.getText();
        if (nuevaCalificacionEdad.equals(String.valueOf(mediaSeleccionada.getCalificacionEdad()))) {
            return;
        }
        
        boolean validCalificacionEdad = true;
        String errorMessage = "";
        Pelicula nuevaPelicula = new Pelicula((Pelicula) mediaSeleccionada);
        
        if (!nuevaCalificacionEdad.matches("\\d+")) {
            errorMessage = "La calificación de Edad debe de contener solo números";
            validCalificacionEdad = false;
        }
        if (validCalificacionEdad && (Integer.valueOf(nuevaCalificacionEdad) < 0 || Integer.valueOf(nuevaCalificacionEdad) > 18)) {
            errorMessage = "Rango inválido debe de ser entre 0 - 18";
            validCalificacionEdad = false;
        }
        
        if (validCalificacionEdad) {
            nuevaPelicula.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            if (listaMedia.contains(nuevaPelicula)) {
                errorMessage = "Ya exite otra película igual.";
                validCalificacionEdad = false;
            }
        }
        
        if (validCalificacionEdad) {
            mediaSeleccionada.setCalificacionEdad(Integer.valueOf(nuevaCalificacionEdad));
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(this, errorMessage);
            jtfPeliculaCalificacionDeEdad.setText(mediaSeleccionada.getCalificacionEdad()+"");
        }
    }//GEN-LAST:event_jtfPeliculaCalificacionDeEdadFocusLost

    private void jtfPeliculaFechaIncorporacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaFechaIncorporacionFocusLost
        String nuevaFecha = jtfPeliculaFechaIncorporacion.getText();
        if (nuevaFecha.equals(format.format(mediaSeleccionada.getFechaIncorporacionAlCatalogo()))) {
            return;
        }
        
        boolean validFecha = true;
        String errorMessage = "";
        
        if (!Utilities.validateLocalDate(nuevaFecha)) {
            errorMessage = "El formato de fecha debe de ser dd/MM/yyyy";
            validFecha = false;
        }
        if (validFecha) {
            mediaSeleccionada.setFechaIncorporacionAlCatalogo(Utilities.convertToLocalDate(nuevaFecha));
            actualizarListaMedia();
        } else {
           JOptionPane.showMessageDialog(rootPane, errorMessage);
           jtfPeliculaFechaIncorporacion.setText(format.format(mediaSeleccionada.getFechaIncorporacionAlCatalogo()));
        }
    }//GEN-LAST:event_jtfPeliculaFechaIncorporacionFocusLost

    private void jcbPeliculaDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPeliculaDisponibilidadActionPerformed
        mediaSeleccionada.setEstaDisponible(jcbPeliculaDisponibilidad.isSelected());
    }//GEN-LAST:event_jcbPeliculaDisponibilidadActionPerformed

    private void jtfPeliculaDirectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaDirectorFocusLost
        String nuevoDirector = jtfPeliculaDirector.getText();
        Pelicula peliculaSeleccionada = (Pelicula) mediaSeleccionada;
        if (nuevoDirector.isBlank()) {
            JOptionPane.showMessageDialog(this, "No puedes dejar el cambo vacío.");
            jtfPeliculaDirector.setText(peliculaSeleccionada.getDirector());
        } else {
            peliculaSeleccionada.setDirector(nuevoDirector);
            actualizarListaMedia();
        }
    }//GEN-LAST:event_jtfPeliculaDirectorFocusLost

    private void jtfPeliculaActorPrincipalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaActorPrincipalFocusLost
        String nuevoActor = jtfPeliculaActorPrincipal.getText();
        Pelicula peliculaSeleccionada = (Pelicula) mediaSeleccionada;
        if (nuevoActor.isBlank()) {
            JOptionPane.showMessageDialog(this, "No puedes dejar el cambo vacío.");
            jtfPeliculaActorPrincipal.setText(peliculaSeleccionada.getDirector());
        } else {
            peliculaSeleccionada.setActorPrincipal(nuevoActor);
            actualizarListaMedia();
        }
    }//GEN-LAST:event_jtfPeliculaActorPrincipalFocusLost

    private void jtfPeliculaDuracionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPeliculaDuracionFocusLost
        Pelicula peliculaSeleccionada = (Pelicula) mediaSeleccionada;
        String duracion = jtfPeliculaDuracion.getText();
        if (duracion.equals(String.valueOf(peliculaSeleccionada.getDuracion()+""))) {
            return;
        }
        String errorMessage = "";
        boolean validDuracion = true;
        
        if (!duracion.matches("\\d+")) {
            errorMessage = "La duarcion debe de ser numérica";
            validDuracion = false;
        }
        if (validDuracion && !Utilities.validateRange(Integer.valueOf(duracion), 60, 241)) {
            errorMessage = "La duarcion debe de encontrase entre 60 y 240";
            validDuracion = false;
        }
        
        if (validDuracion) {
            peliculaSeleccionada.setDuracion(Integer.valueOf(duracion));
            actualizarListaMedia();
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMessage);
            jtfPeliculaDuracion.setText(peliculaSeleccionada.getDuracion()+"");
        }
    }//GEN-LAST:event_jtfPeliculaDuracionFocusLost

    private void jcbPeliculaTematicaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbPeliculaTematicaFocusLost
        Pelicula peliculaSeleccionada = (Pelicula) mediaSeleccionada;
        if (peliculaSeleccionada.getCategoria() == jcbPeliculaTematica.getSelectedItem()) {
            return;
        }
        
        peliculaSeleccionada.setCategoria((Tematica)jcbPeliculaTematica.getSelectedItem());
        actualizarListaMedia();
    }//GEN-LAST:event_jcbPeliculaTematicaFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntefazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntefazJF().setVisible(true);
            }
        });
    }

    
    private void cargarInfomacioPelicula(Pelicula peliculaSeleccionada) {
        jcbPeliculaTematica.setModel(new DefaultComboBoxModel(Tematica.values()));
        jlTituloPelicula.setText("Pelicula: " + peliculaSeleccionada.getNombre());
        jtfPeliculaNombre.setText(peliculaSeleccionada.getNombre());
        jtfPeliculaCalificacionDeEdad.setText(peliculaSeleccionada.getCalificacionEdad()+"");
        jtfPeliculaFechaIncorporacion.setText(format.format(peliculaSeleccionada.getFechaIncorporacionAlCatalogo()));
        jcbPeliculaDisponibilidad.setSelected(peliculaSeleccionada.isEstaDisponible());
        jtfPeliculaDirector.setText(peliculaSeleccionada.getDirector());
        jtfPeliculaActorPrincipal.setText(peliculaSeleccionada.getActorPrincipal());
        jtfPeliculaDuracion.setText(peliculaSeleccionada.getDuracion()+"");
        jcbPeliculaTematica.setSelectedItem(peliculaSeleccionada.getCategoria());
   }
    
    private void actualizarListaMedia () {
        modelo.clear();
        
        for (Media m : listaMedia) {
            modelo.añadirMedia(m);
        }
    }
    
    
    
    
    
    
    private DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private ArrayList<Media> listaMedia;
    private Media mediaSeleccionada;
    private ModeloListaMedia modelo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcbPeliculaDisponibilidad;
    private javax.swing.JComboBox<String> jcbPeliculaTematica;
    private javax.swing.JLabel jlTituloActorPrincipal;
    private javax.swing.JLabel jlTituloCalificacionDeEdad;
    private javax.swing.JLabel jlTituloDirector;
    private javax.swing.JLabel jlTituloDuracion;
    private javax.swing.JLabel jlTituloFechaIncorporación;
    private javax.swing.JLabel jlTituloNombre;
    private javax.swing.JLabel jlTituloPelicula;
    private javax.swing.JLabel jlTituloTematica;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenu jmCrear;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiCrearPelicula;
    private javax.swing.JMenuItem jmiCrearSerie;
    private javax.swing.JMenuItem jmiEliminar;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JPanel jpInformacionMedia;
    private javax.swing.JPanel jpInformacionPelicula;
    private javax.swing.JPanel jpInformacionSerie;
    private javax.swing.JPopupMenu jpmEliminar;
    private javax.swing.JTable jtListaMedia;
    private javax.swing.JTextField jtfPeliculaActorPrincipal;
    private javax.swing.JTextField jtfPeliculaCalificacionDeEdad;
    private javax.swing.JTextField jtfPeliculaDirector;
    private javax.swing.JTextField jtfPeliculaDuracion;
    private javax.swing.JTextField jtfPeliculaFechaIncorporacion;
    private javax.swing.JTextField jtfPeliculaNombre;
    // End of variables declaration//GEN-END:variables
}
