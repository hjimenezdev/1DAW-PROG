package interfaz;

import Funciones.Utilities;
import java.awt.ComponentOrientation;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Media;
import modelo.Pelicula;
import modelo.Tematica;

/**
 *
 * @author josemaria
 */
public class JDGestionarPelicula extends javax.swing.JDialog {

    /**
     * Creates new form JDGestionarPelicula
     */
    public JDGestionarPelicula(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public JDGestionarPelicula(java.awt.Frame parent, boolean modal, Pelicula pelicula, ArrayList<Media> listaMedias) {
        this(parent, modal);
        this.peliculaSeleccionada = pelicula;
        this.listaMedias = listaMedias;
        inicializar();
    }
    
    private void inicializar() {
        jcbDisponibilidad.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jcbTematica.setModel(new DefaultComboBoxModel(Tematica.values()));
        
        jtfNombre.setText(peliculaSeleccionada.getNombre());
        jtfCalificacionDeEdad.setText(String.valueOf(peliculaSeleccionada.getCalificacionEdad()));
        jtfFechaIncorporacion.setText(formato.format(peliculaSeleccionada.getFechaIncorporacionAlCatalogo()));
        jcbDisponibilidad.setSelected(peliculaSeleccionada.isEstaDisponible());
        jtfDirector.setText(peliculaSeleccionada.getDirector());
        jtfActorPrincipal.setText(peliculaSeleccionada.getDirector());
        jtfDuracion.setText(String.valueOf(peliculaSeleccionada.getDuracion()));
        jcbTematica.setSelectedItem(peliculaSeleccionada.getCategoria());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlTitulo = new javax.swing.JLabel();
        jlTituloActorPrincipal = new javax.swing.JLabel();
        jtfDuracion = new javax.swing.JTextField();
        jlTituloDuracion = new javax.swing.JLabel();
        jcbTematica = new javax.swing.JComboBox<>();
        jlTituloTematica = new javax.swing.JLabel();
        jbAceptar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jtfNombre = new javax.swing.JTextField();
        jtfCalificacionDeEdad = new javax.swing.JTextField();
        jlTituloNombre = new javax.swing.JLabel();
        jtfFechaIncorporacion = new javax.swing.JTextField();
        jlTituloCalificacionDeEdad = new javax.swing.JLabel();
        jcbDisponibilidad = new javax.swing.JCheckBox();
        jlTituloFechaIncorporación = new javax.swing.JLabel();
        jtfDirector = new javax.swing.JTextField();
        jlTituloDirector = new javax.swing.JLabel();
        jtfActorPrincipal = new javax.swing.JTextField();
        jmbMenu = new javax.swing.JMenuBar();
        jmAcciones = new javax.swing.JMenu();
        jmiVotar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlTitulo.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jlTitulo.setText("GESTIONAR PELICULA");

        jlTituloActorPrincipal.setText("Actor Principal:");

        jlTituloDuracion.setText("Duracion:");

        jcbTematica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlTituloTematica.setText("Tematica");

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jlTituloNombre.setText("Nombre:");

        jlTituloCalificacionDeEdad.setText("Calificación de Edad:");

        jcbDisponibilidad.setText("Se encuetra Disponible");

        jlTituloFechaIncorporación.setText("Fecha Incorporación al Catalogo:");

        jlTituloDirector.setText("Director:");

        jmAcciones.setText("Acciones");

        jmiVotar.setText("Votar");
        jmiVotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiVotarActionPerformed(evt);
            }
        });
        jmAcciones.add(jmiVotar);

        jmbMenu.add(jmAcciones);

        setJMenuBar(jmbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlTitulo)
                .addGap(101, 101, 101))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcbDisponibilidad)
                                .addContainerGap(178, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbAceptar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbCancelar)
                                .addGap(65, 65, 65))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(65, 65, 65)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jlTituloCalificacionDeEdad)
                                        .addComponent(jlTituloNombre)))
                                .addComponent(jlTituloFechaIncorporación))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlTituloTematica)
                                    .addComponent(jlTituloActorPrincipal)
                                    .addComponent(jlTituloDirector)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlTituloDuracion)
                                        .addGap(10, 10, 10)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfNombre)
                            .addComponent(jtfCalificacionDeEdad)
                            .addComponent(jtfFechaIncorporacion)
                            .addComponent(jtfDirector)
                            .addComponent(jtfActorPrincipal)
                            .addComponent(jtfDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTitulo)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloNombre)
                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloCalificacionDeEdad)
                    .addComponent(jtfCalificacionDeEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaIncorporación)
                    .addComponent(jtfFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jcbDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloDirector)
                    .addComponent(jtfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloActorPrincipal)
                    .addComponent(jtfActorPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlTituloDuracion)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jtfDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTematica)
                    .addComponent(jcbTematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAceptar)
                    .addComponent(jbCancelar))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed
        boolean isValidInput = true;
        String nombre = jtfNombre.getText();
        String calificacionEdadString = jtfCalificacionDeEdad.getText();
        String fechaIncorporacionString = jtfFechaIncorporacion.getText();
        boolean disponibilidad = jcbDisponibilidad.isSelected();
        String director = jtfDirector.getText();
        String actorPrincipal = jtfActorPrincipal.getText();
        String duracionString = jtfDuracion.getText();
        Tematica tematica = (Tematica) jcbTematica.getSelectedItem();

        if (nombre.isBlank()) {
            JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput && (!calificacionEdadString.matches("\\d+") || !Utilities.validateRange(Integer.valueOf(calificacionEdadString), 0, 19))) {
            JOptionPane.showMessageDialog(this, "La calificación de edad debe de estar entre 0 y 18", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput && !Utilities.validateLocalDate(fechaIncorporacionString)) {
            JOptionPane.showMessageDialog(this, "Fecha de Incorporación es inválida", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput && director.isBlank()) {
            JOptionPane.showMessageDialog(this, "El director no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput && actorPrincipal.isBlank()) {
            JOptionPane.showMessageDialog(this, "El actor principal no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput && (!duracionString.matches("\\d+") || !Utilities.validateRange(Integer.valueOf(duracionString),60,241))) {
            JOptionPane.showMessageDialog(this, "La duración debe de estar entre 60 y 240", "Error", JOptionPane.ERROR_MESSAGE);
            isValidInput = false;
        }

        if (isValidInput) {
            boolean validUpdate = true;
            LocalDate fechaIncorporacion = Utilities.convertToLocalDate(fechaIncorporacionString);
            int calificacionEdad = Integer.valueOf(calificacionEdadString);
            int duracion = Integer.valueOf(duracionString);
            
            if (!peliculaSeleccionada.getNombre().equals(nombre) && peliculaSeleccionada.getCalificacionEdad() != calificacionEdad) {
                Pelicula pelicula = new Pelicula(nombre, calificacionEdad, fechaIncorporacion, disponibilidad, director, actorPrincipal, duracion, tematica);
               
                 if (this.listaMedias.contains(pelicula)) {
                    JOptionPane.showMessageDialog(this, "Ya existe una Película con el mismo nombre y calificación de edad", "Error", JOptionPane.ERROR_MESSAGE);
                    validUpdate = false;
                }
            }
            
            if (validUpdate) {
                
                if (!peliculaSeleccionada.getNombre().equals(nombre)) {
                    peliculaSeleccionada.setNombre(nombre);
                }  
                if (peliculaSeleccionada.getCalificacionEdad() != calificacionEdad) {
                    peliculaSeleccionada.setCalificacionEdad(calificacionEdad);
                }
                if (!peliculaSeleccionada.getFechaIncorporacionAlCatalogo().equals(fechaIncorporacion)) {
                    peliculaSeleccionada.setFechaIncorporacionAlCatalogo(fechaIncorporacion);
                }
                if (peliculaSeleccionada.isEstaDisponible() != disponibilidad) {
                    peliculaSeleccionada.setEstaDisponible(disponibilidad);
                }
                if (!peliculaSeleccionada.getDirector().equals(director)) {
                    peliculaSeleccionada.setDirector(director);
                }
                if (!peliculaSeleccionada.getActorPrincipal().equals(actorPrincipal)) {
                    peliculaSeleccionada.setActorPrincipal(actorPrincipal);
                }
                if (peliculaSeleccionada.getDuracion() != duracion) {
                    peliculaSeleccionada.setDuracion(duracion);
                }
                if (peliculaSeleccionada.getCategoria() != tematica) {
                    peliculaSeleccionada.setCategoria(tematica);
                }
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_jbAceptarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jmiVotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiVotarActionPerformed
        boolean validInput = false;
        boolean exit = false;
        String voto = "";
        do {
            voto = JOptionPane.showInputDialog(this,"Ingrese el voto (0 - 10):","Votar",JOptionPane.INFORMATION_MESSAGE);
            if (voto != null && voto.matches("\\d+") && (Integer.valueOf(voto) >= 0 && Integer.valueOf(voto) <= 10)) {
                validInput = true;
            } else if (voto != null) {
                JOptionPane.showMessageDialog(this, "Valor incorrecto.");
                validInput = false;
            } else {
                exit = true;
            }
        } while (!validInput && !exit);
        
        if (validInput) {
            peliculaSeleccionada.votar(Integer.valueOf(voto));
            JOptionPane.showMessageDialog(this, "Voto realizado con exito");
        }
        
    }//GEN-LAST:event_jmiVotarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDGestionarPelicula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDGestionarPelicula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDGestionarPelicula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDGestionarPelicula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDGestionarPelicula dialog = new JDGestionarPelicula(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy"); // Definir el formato deseado
    private Pelicula peliculaSeleccionada;
    private ArrayList<Media> listaMedias;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JCheckBox jcbDisponibilidad;
    private javax.swing.JComboBox<String> jcbTematica;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JLabel jlTituloActorPrincipal;
    private javax.swing.JLabel jlTituloCalificacionDeEdad;
    private javax.swing.JLabel jlTituloDirector;
    private javax.swing.JLabel jlTituloDuracion;
    private javax.swing.JLabel jlTituloFechaIncorporación;
    private javax.swing.JLabel jlTituloNombre;
    private javax.swing.JLabel jlTituloTematica;
    private javax.swing.JMenu jmAcciones;
    private javax.swing.JMenuBar jmbMenu;
    private javax.swing.JMenuItem jmiVotar;
    private javax.swing.JTextField jtfActorPrincipal;
    private javax.swing.JTextField jtfCalificacionDeEdad;
    private javax.swing.JTextField jtfDirector;
    private javax.swing.JTextField jtfDuracion;
    private javax.swing.JTextField jtfFechaIncorporacion;
    private javax.swing.JTextField jtfNombre;
    // End of variables declaration//GEN-END:variables
}
