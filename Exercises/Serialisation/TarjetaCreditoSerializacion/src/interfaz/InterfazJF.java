/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import modelo.ModeloListaMovimientos;
import modelo.ModeloListaTarjetasCredito;
import modelo.Movimiento;
import modelo.TarjetaCredito;

/**
 *
 * @author josemaria
 */
public class InterfazJF extends javax.swing.JFrame {

    /**
     * Creates new form JFInterfaz
     */
    public InterfazJF() {
        initComponents();
        inicializar();
    }
    
    private void inicializar() {
        listaTarjetas = new ArrayList<>(); // Inicializamos la Lista de Tarjetas
        tarjetaSeleccionada = null;
        
        // Creamos el Modelo de la Lista de Tarjetas
        modeloTarjetasCredito = new ModeloListaTarjetasCredito();
        // Actualizamos JTable para que use el Modelo de Tarjetas de Credito
        jtListaTarjetasCredito.setModel(modeloTarjetasCredito);
        
        // Creamos el Modelo de la Lista de Movimientos
        modeloMovimientos = new ModeloListaMovimientos();
        // Actualizamos JTable para que use el Modelo de Movimientos
        jtListaMovimientos.setModel(modeloMovimientos);
        
        // Creamos datos de prueba
        listaTarjetas.add(new TarjetaCredito("Jose Maria Campos", "54530823P", "1234", 4000, "4275060355274659"));
        actualizarListaTarjeta();
        
        jtpTarjetaSeleccionada.setVisible(false); // Ocultamos el JTabbedPane
        jlEstadoSeleccion.setText("No se ha encontrado Tarjeta seleccionada");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmEliminarMenu = new javax.swing.JPopupMenu();
        jmiEliminarTarjeta = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaTarjetasCredito = new javax.swing.JTable();
        jlTituloTarjetaSeleccionada = new javax.swing.JLabel();
        jtpTarjetaSeleccionada = new javax.swing.JTabbedPane();
        jpInformacion = new javax.swing.JPanel();
        jlFechaCaducidad = new javax.swing.JLabel();
        jlGastosTotales = new javax.swing.JLabel();
        jlTituloNumeroTarjeta = new javax.swing.JLabel();
        jlTituloTitular = new javax.swing.JLabel();
        jlTituloFechaCaducidad = new javax.swing.JLabel();
        jlTituloGastosTotales = new javax.swing.JLabel();
        jlNumeroTarjeta = new javax.swing.JLabel();
        jlTitular = new javax.swing.JLabel();
        jbModificarPIN = new javax.swing.JButton();
        jbRealizarPago = new javax.swing.JButton();
        jpMovimientos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtListaMovimientos = new javax.swing.JTable();
        jlEstadoSeleccion = new javax.swing.JLabel();
        jmbMenu = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jmAcciones = new javax.swing.JMenu();
        jmiAñadirTarjeta = new javax.swing.JMenuItem();

        jmiEliminarTarjeta.setText("Eliminar");
        jmiEliminarTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarTarjetaActionPerformed(evt);
            }
        });
        jpmEliminarMenu.add(jmiEliminarTarjeta);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtListaTarjetasCredito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaTarjetasCredito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaTarjetasCreditoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtListaTarjetasCredito);

        jlTituloTarjetaSeleccionada.setText("Tarjeta Seleccionada:");

        jpInformacion.setToolTipText("");

        jlFechaCaducidad.setText(" ");

        jlGastosTotales.setText(" ");

        jlTituloNumeroTarjeta.setText("Número Tarjeta: ");

        jlTituloTitular.setText("Titular: ");

        jlTituloFechaCaducidad.setText("Fecha Caducidad:");

        jlTituloGastosTotales.setText("Gastos Totales:");

        jlNumeroTarjeta.setText(" ");

        jlTitular.setText(" ");

        jbModificarPIN.setText("Modificar PIN");
        jbModificarPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarPINActionPerformed(evt);
            }
        });

        jbRealizarPago.setText("Realizar Pago");
        jbRealizarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRealizarPagoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpInformacionLayout = new javax.swing.GroupLayout(jpInformacion);
        jpInformacion.setLayout(jpInformacionLayout);
        jpInformacionLayout.setHorizontalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jlTituloNumeroTarjeta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlNumeroTarjeta))
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlTituloTitular)
                            .addComponent(jlTituloFechaCaducidad)
                            .addComponent(jlTituloGastosTotales))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlTitular)
                            .addComponent(jlFechaCaducidad)
                            .addComponent(jlGastosTotales)))
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addComponent(jbModificarPIN)
                        .addGap(43, 43, 43)
                        .addComponent(jbRealizarPago)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpInformacionLayout.setVerticalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloNumeroTarjeta)
                    .addComponent(jlNumeroTarjeta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTitular)
                    .addComponent(jlTitular))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaCaducidad)
                    .addComponent(jlFechaCaducidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloGastosTotales)
                    .addComponent(jlGastosTotales))
                .addGap(44, 44, 44)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbModificarPIN)
                    .addComponent(jbRealizarPago))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jtpTarjetaSeleccionada.addTab("Información", jpInformacion);

        jtListaMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtListaMovimientos);

        javax.swing.GroupLayout jpMovimientosLayout = new javax.swing.GroupLayout(jpMovimientos);
        jpMovimientos.setLayout(jpMovimientosLayout);
        jpMovimientosLayout.setHorizontalGroup(
            jpMovimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpMovimientosLayout.setVerticalGroup(
            jpMovimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpTarjetaSeleccionada.addTab("Movimientos", jpMovimientos);

        jlEstadoSeleccion.setText(" ");

        jmArchivo.setText("Archivo");

        jmiGuardar.setText("Guardar");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiGuardar);

        jmiCargar.setText("Cargar");
        jmiCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiCargar);

        jmbMenu.add(jmArchivo);

        jmAcciones.setText("Acciones");

        jmiAñadirTarjeta.setText("Añadir Tarjeta");
        jmiAñadirTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAñadirTarjetaActionPerformed(evt);
            }
        });
        jmAcciones.add(jmiAñadirTarjeta);

        jmbMenu.add(jmAcciones);

        setJMenuBar(jmbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlTituloTarjetaSeleccionada)
                        .addGap(18, 18, 18)
                        .addComponent(jlEstadoSeleccion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtpTarjetaSeleccionada, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTarjetaSeleccionada)
                    .addComponent(jlEstadoSeleccion))
                .addGap(18, 18, 18)
                .addComponent(jtpTarjetaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiAñadirTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAñadirTarjetaActionPerformed
        JDCrearTarejeta jDCrearTarejeta = new JDCrearTarejeta(this,true);
        jDCrearTarejeta.setVisible(true);
        
        
        if (jDCrearTarejeta.isCreada()) {
            TarjetaCredito nuevaTarjeta = jDCrearTarejeta.getTarjetaCredito();
            boolean tarjetaDuplicada = listaTarjetas.contains(nuevaTarjeta);
            boolean seguirCreando = true;
            
            while (tarjetaDuplicada && seguirCreando) {
                JOptionPane.showMessageDialog(rootPane, "Ya existe otra Tarjeta cono el mismo Número");
                jDCrearTarejeta.setVisible(true);
                
                if (jDCrearTarejeta.isCreada()) {
                    nuevaTarjeta = jDCrearTarejeta.getTarjetaCredito();
                    tarjetaDuplicada = listaTarjetas.contains(nuevaTarjeta);
                } else {
                    seguirCreando = false;
                }
            }
            
            if (!tarjetaDuplicada) {
                listaTarjetas.add(nuevaTarjeta);
                modeloTarjetasCredito.añadirTarjeta(nuevaTarjeta);
            }
        }
    }//GEN-LAST:event_jmiAñadirTarjetaActionPerformed

    private void jtListaTarjetasCreditoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaTarjetasCreditoMouseClicked
         int index = jtListaTarjetasCredito.getSelectedRow();
         tarjetaSeleccionada = listaTarjetas.get(index);
         jlEstadoSeleccion.setVisible(false);
         actualizarInformacionTarjeta(tarjetaSeleccionada);
         jtpTarjetaSeleccionada.setVisible(true);
    }//GEN-LAST:event_jtListaTarjetasCreditoMouseClicked

    private void jmiEliminarTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarTarjetaActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Esta seguro que deseas eliminar la Tajeta.");
        
        if (result == JOptionPane.YES_OPTION) {
            int indexSelectedTarjeta = jtListaTarjetasCredito.getSelectedRow();
            listaTarjetas.remove(indexSelectedTarjeta);
            modeloTarjetasCredito.eliminarTarjeta(indexSelectedTarjeta);
        }
    }//GEN-LAST:event_jmiEliminarTarjetaActionPerformed

    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        JFileChooser gestorArchivos = new JFileChooser();
        int option = gestorArchivos.showSaveDialog(this);
        
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = gestorArchivos.getSelectedFile();
            
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedFile))) {
                oos.writeObject(listaTarjetas);
                JOptionPane.showMessageDialog(this, "Se ha guardado la información exitosamente","EXITO",JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se ha podido escribir en el fichero","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jmiGuardarActionPerformed

    private void jmiCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarActionPerformed
        JFileChooser gestorArchivos = new JFileChooser();
        int option = gestorArchivos.showSaveDialog(this);
        
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = gestorArchivos.getSelectedFile();
            
            try (ObjectInputStream oos = new ObjectInputStream(new FileInputStream(selectedFile))) {
                this.listaTarjetas = (ArrayList<TarjetaCredito>) oos.readObject();
                
                actualizarListaTarjeta();
                JOptionPane.showMessageDialog(this, "Se ha cargado la información exitosamente","EXITO",JOptionPane.INFORMATION_MESSAGE);

            } catch (ClassNotFoundException | IOException ex) {
                JOptionPane.showMessageDialog(this, "El fichero es erronéo o esta corrupto","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jmiCargarActionPerformed

    private void jbModificarPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarPINActionPerformed
        if (tarjetaSeleccionada == null) {
            JOptionPane.showMessageDialog(rootPane, "No se ha seleccionado ninguna Tarjeta");
            return;
        }
        
        boolean validPin = false;
        boolean exit = false;
        String newPin;
        do {
            newPin = JOptionPane.showInputDialog(this,"Ingresa su nuevo PIN.","Nuevo PIN",1);
            if (newPin != null && newPin.matches("^\\d{4,}$")) {
                validPin = true;
            } else if (newPin != null) {
                JOptionPane.showMessageDialog(this, "El PIN insertado es erroneo");
                validPin = false;
            } else {
                exit = true;
            }
        } while (!validPin && !exit);
        
        if (validPin) {
            tarjetaSeleccionada.setPin(newPin);
            JOptionPane.showMessageDialog(rootPane, "Se ha actualizado el PIN correctamente.");
        }
    }//GEN-LAST:event_jbModificarPINActionPerformed

    private void jbRealizarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRealizarPagoActionPerformed
        JTextField jtfConcepto = new JTextField();
        JTextField jtfCantidad = new JTextField();
        Object[] message = {
            "Concepto:", jtfConcepto,
            "Cantidad:", jtfCantidad
        };
        boolean exit = false;
        boolean pagoValido = false;
        String concepto = "";
        String cantidad = "";
        
        do {
            int option = JOptionPane.showConfirmDialog(this, message, "Realizar Pago", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                double saldoDisponible = tarjetaSeleccionada.getLimite() - tarjetaSeleccionada.gastado();
                boolean validInput = true;
                concepto = jtfConcepto.getText();
                cantidad = jtfCantidad.getText();

                if (concepto.isBlank()) {
                    JOptionPane.showMessageDialog(this, "El concepto no puede estar vacio.");
                    validInput = false;
                }
                if (validInput && !cantidad.matches("\\d+")) {
                    JOptionPane.showMessageDialog(this, "La cantidad debe de ser un valor numérico");
                    System.out.println(cantidad);
                    validInput = false;
                }

                if (validInput && (Integer.valueOf(cantidad) < 0 || Integer.valueOf(cantidad) > saldoDisponible)) {
                    JOptionPane.showMessageDialog(this, "La cantidad supera el Límite");
                    validInput = false;
                }
                
                if (validInput) {
                    pagoValido = true;
                }
                
            } else {
                exit = true;
            }
        } while (!exit && !pagoValido);
        
        if (pagoValido) {
            tarjetaSeleccionada.pagar(Double.valueOf(cantidad), concepto);
            actualizarListaMovimientos();
            actualizarGastoTotales(tarjetaSeleccionada);
            JOptionPane.showMessageDialog(rootPane, "Se ha realizado el pago");
        }
    }//GEN-LAST:event_jbRealizarPagoActionPerformed

    
    private void actualizarInformacionTarjeta(TarjetaCredito tarjetaSeleccionada) {
        jlNumeroTarjeta.setText(tarjetaSeleccionada.getNumeroTarjeta());
        jlTitular.setText(tarjetaSeleccionada.getTitular());
        jlFechaCaducidad.setText(tarjetaSeleccionada.getMesCaducidad()+"/"+tarjetaSeleccionada.getAñoCaducidad());
        actualizarGastoTotales(tarjetaSeleccionada);
    }
    
    private void actualizarGastoTotales(TarjetaCredito tarjetaSeleccionada) {
        jlGastosTotales.setText(String.valueOf(tarjetaSeleccionada.gastado()));
    }
    
    private void actualizarListaTarjeta () {
        modeloTarjetasCredito.clearAll();
        for (TarjetaCredito t : listaTarjetas) {
            modeloTarjetasCredito.añadirTarjeta(t);
        }
    }
    
    private void actualizarListaMovimientos() {
        ArrayList<Movimiento> movimientos = tarjetaSeleccionada.movimientos(tarjetaSeleccionada.numeroMovimientos());
        modeloMovimientos.clearAll();
        for (Movimiento m : movimientos) {
            modeloMovimientos.añadirMovimiento(m);
        }
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazJF().setVisible(true);
            }
        });
    }



    private ModeloListaMovimientos modeloMovimientos;
    private ModeloListaTarjetasCredito modeloTarjetasCredito;
    private ArrayList<TarjetaCredito> listaTarjetas;
    private TarjetaCredito tarjetaSeleccionada;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbModificarPIN;
    private javax.swing.JButton jbRealizarPago;
    private javax.swing.JLabel jlEstadoSeleccion;
    private javax.swing.JLabel jlFechaCaducidad;
    private javax.swing.JLabel jlGastosTotales;
    private javax.swing.JLabel jlNumeroTarjeta;
    private javax.swing.JLabel jlTitular;
    private javax.swing.JLabel jlTituloFechaCaducidad;
    private javax.swing.JLabel jlTituloGastosTotales;
    private javax.swing.JLabel jlTituloNumeroTarjeta;
    private javax.swing.JLabel jlTituloTarjetaSeleccionada;
    private javax.swing.JLabel jlTituloTitular;
    private javax.swing.JMenu jmAcciones;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenuBar jmbMenu;
    private javax.swing.JMenuItem jmiAñadirTarjeta;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiEliminarTarjeta;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JPanel jpInformacion;
    private javax.swing.JPanel jpMovimientos;
    private javax.swing.JPopupMenu jpmEliminarMenu;
    private javax.swing.JTable jtListaMovimientos;
    private javax.swing.JTable jtListaTarjetasCredito;
    private javax.swing.JTabbedPane jtpTarjetaSeleccionada;
    // End of variables declaration//GEN-END:variables
}
